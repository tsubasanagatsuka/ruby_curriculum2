# 目的
# プログラミングとは何かを理解すること
# RubyとWebアプリケーションとの関連性を理解すること
# Rubyの実行方法を理解すること
# はじめてのプログラミング
# これから行うプログラミングについて、まずは基礎的な用語をおさらいしながら学びましょう。

# Rubyとは何か学ぼう
# プログラミング言語のRubyを勉強していきましょう。
# その前にここで、そもそもプログラミングとは何か、基本的な用語の意味を学んでおきましょう。

# プログラミング
# コンピュータが実行する処理の手順をまとめたデータをプログラムと呼び、
# このプログラムを作成・記述していく作業のことをプログラミングと呼びます。

# プログラミング言語
# プログラミングを行うために使用する言語です。
# 対して、私たち人間が日常会話で使用する言語は、自然言語と呼ばれます。

# 日本語や英語などの自然言語は、人間同士がコミュニケーションを行うためのものであり、
# プログラミング言語は、人間がコンピュータに処理をお願いするための言語です。

# 自然言語とプログラミング言語

# ソースコード
# プログラミング言語で書かれたテキストやファイルのことをソースコードと呼びます。
# ソースコードは、単に「ソース」や「コード」と呼ぶことが多いので覚えておきましょう。

# Rubyルビー
# Rubyはプログラミング言語の1つです。記述がシンプルでわかりやすいため気軽に楽しくプログラミングでき、しかも実用的です。大きなWebアプリケーションから小さなプログラムまで、さまざまなソフトウェアを作ることができます。

# → Ruby 公式サイト

# Ruby

# プログラミングの流れを学ぼう
# そもそもプログラミングはどのような流れで行われるのでしょうか。プログラミングの流れを簡単に理解しましょう。

# プログラムを書いて保存する
# PCに対して、書いたプログラムを実行するよう命令を出す
# プログラミングの基本は、「プログラムを書いてファイルとして保存し、そのファイルを実行する」ことです。

# 皆さんは、Wordやメモ帳といったソフトを使用してPCで文章を作成したことがあるでしょうか。「プログラムを書く」こともこれと同じで、何らかのソフトを利用してプログラムを書き込み、ファイルとして保存します。

# https://tech-master.s3.amazonaws.com/uploads/curriculums//aa1a263ba9eacc88b3fbd526994afef8.png

# 本カリキュラムでは、プログラムを書いていくソフトとして、指定のテキストエディタである「Visual Studio Code」を利用します。

# プログラムは書いても実行しなければ、ただのメモ用紙のようなものです。
# プログラムが書けたら、PCに読み込ませて実行します。

# プログラムには、皆さんが想像するより遥かに柔軟な仕事をさせることができます。簡単な計算を行うプログラムから、自分の携帯電話の支払情報をExcel用ファイルとして出力するプログラム、さらには「Twitter」のような大きなWebサービスまで構築することもできます。
# ​

# Rubyプログラムの実行
# それではいよいよRubyプログラムの作成と実行をしてみましょう。
# プログラムを実行するまでの流れはとてもシンプルです。

# ファイルを作成
# ファイルにプログラムを記述
# ファイルを指定してプログラムを実行
# まずはターミナルの画面上に文字を表示するという簡単なプログラムを書いて、Rubyのプログラムの作り方やプログラムの実行方法を学んでいきます。
# プログラミングを学ぶとき、最初に作成するもっとも簡単なプログラムとして有名なものが「Hello World」と表示するプログラムです。

# 【例】と書かれた後に続くコードはあくまで参考なので、実際に打ち込まないでください（エラーが起こる場合もあります）。

# Rubyプログラムの実行（あとで学習）
# % ruby helloworld.rb
# Hello World  # ←Hello Worldと出力

puts "Hello World"

# 今回は、このようにターミナルの画面上にHello Worldを表示できることが目標です。
# 早速、ファイルを作成していきましょう！

# Rubyファイルを作成しよう
# Rubyファイルを作成します。HTMLやCSSのファイルに.htmlや.cssと拡張子をつけたのと同様に、Rubyファイルにも拡張子をつけます。
# Rubyファイルには、sample.rbのように、.rbという拡張子をつけます。

# 今回のRubyプログラムはHello Worldを表示するものなので
# ファイル名は「helloworld.rb」とします。

# まず、プログラムを記述するためのテキストエディタを開きましょう。

# テキストエディタを開きましょう
# command（⌘） を押しながら スペースを押して、Spotlight検索を行います。vsと入力するだけでVSCodeが表示されます。Enterキーを押下して、VSCodeを起動しましょう。

# https://tech-master.s3.amazonaws.com/uploads/curriculums//339786f39b864e4c4b32619e853e1baf.gif

# テキストエディタが開けたら下記画像のようになるはずです。
# vscode起動

# テキストエディタで新しいファイルを開きましょう
# テキストエディタが起動できたら、新規ファイルを開きます。
# command[⌘] + Nを実行してください。

# vscode新規ファイル

# 新規のファイルが作成されました。このファイルにはまだ名前も拡張子もついていません。

# 名前をつけてファイルを保存しましょう
# この新規のファイルを「helloworld.rb」という名前で保存します。
# キーボードでcommand[⌘] + Sを押すとファイル名と保存先を決めるための画面がでてきます。

# vscode保存画面

# 保存場所として、ホームディレクトリ上に「ruby」というディレクトリを作成します。
# ホームディレクトリを選択し、[新規フォルダ] → 「ruby」を記入 → [作成]を行います。

# rubyディレクトリ作成gif

# 今後は、Rubyを学習するためのファイルを、このrubyディレクトリに格納します。

# 名前が「helloworld.rb」になっていることを確認し、
# 必ずrubyディレクトリを選択して、[保存]を選択しましょう。

# Rubyファイル保存gif

# ファイルの作成と保存ができたら、このRubyファイルを開く方法も学ぶため、
# テキストエディタは一旦閉じてしまいましょう。

# Rubyでプログラムを書こう
# ファイルの作成ができたので、これから作成したhelloworld.rbファイルにプログラムを書いていきます。作成したhelloworld.rbをテキストエディタで開きましょう。

# テキストエディタでhelloworld.rbを開きましょう
# Finderを開き、ホームディレクトリからrubyディレクトリへ移動します。

# helloworld.rbを右クリックして、
# 「このアプリケーションで開く」→「Visual Studio Code」でhelloworld.rbを開いてください。

# MacBookにおける右クリックとは、トラックパッドを2本指でクリック(トラックパッドの設定で異なる場合があります。)することです。
# vscodeで開く

# 開いたhelloworld.rbにRubyプログラムを書いてみます。まずはこちらで指定したソースコードをそのまま書いてください。

# helloworld.rbに以下のコードを記述しましょう
# ruby/helloworld.rb
# 1
# puts "Hello World"
# これで画面上にHello Worldと表示するプログラムが書けました。
# ソースコードの内容を見てみましょう。

# putsという記述と、"Hello World"という記述の2つに分かれます。
# putsは、Rubyの命令の1つで、ターミナルの画面に文字を表示するための記述です。
# putsの後には半角スペースをあける必要があります。

# 必ず半角です。全角スペースだと動かないので注意しましょう。
# "Hello World"はターミナルの画面に表示される文字です。

# 詳しい学習は、後の章で行うものとして、まずはこのプログラムを実行してみましょう！

# Rubyのプログラムを実行しよう
# ターミナルを開きましょう
# このとき、command[⌘]を押しつつtabを押すと、起動しているアプリケーションを切り替えることができます。さまざまなアプリケーションを開きつつ作業をするエンジニアにとって便利なコマンドなので、積極的に利用するようにしましょう。

# https://tech-master.s3.amazonaws.com/uploads/curriculums//ef3c5d2105b89c6f98f1e67b06ac0dd3.gif

# command[⌘]を押しつつtabを連打すると、上記の動画のように起動中のアプリケーションを選択していくことができます。command[⌘]を離して該当するアプリケーションを開きます。今回は「ターミナル」開きましょう。
# もしターミナルが表示されない場合は、control + スペースまたはcommand[⌘] + スペースでSpotlight検索を開き、「ターミナル」と入力して開いてください。

# ターミナルでrubyディレクトリに移動しましょう
# helloworld.rbは、ホームディレクトリのrubyディレクトリにあるので、cdコマンドを使って移動しましょう。

# まず、pwdで現在のディレクトリであるカレントディレクトリがホームディレクトリであることを確認します。
# 次に、lsコマンドを打ち込んで、移動先を確認します。

# ターミナル
# 1
# 2
# 3
# 4
# 5
# 6
# # カレントディレクトリのパスを確認
# % pwd
# /Users/ユーザ名

# # カレントディレクトリ直下のディレクトリやファイルを確認
# % ls
# いくつかのディレクトリやファイルが表示され、その内に「ruby」と表示されているはずです。これはカレントディレクトリの直下にrubyという名前のディレクトリがあるということです。

# それでは、rubyディレクトリへ移動しましょう。

# ターミナル
# 1
# 2
# # rubyディレクトリへ移動
# % cd ruby
# rubyディレクトリに移動できました。

# Rubyファイルが入っていることを確認しましょう
# 移動したディレクトリにhelloworld.rbが格納されているか確認します。
# カレントディレクトリがrubyディレクトリである状態で、lsコマンドを打ち込みましょう。

# ターミナル
# 1
# 2
# 3
# 4
# 5
# 6
# # カレントディレクトリのパスを確認
# % pwd
# /Users/ユーザ名/ruby

# # ディレクトリ内のファイルを確認
# % ls
# 正しく保存されていれば、helloworld.rbと表示されます。
# もし見当たらない場合はメンターを呼びましょう。

# 最後にRubyプログラムを実行します。
# Rubyプログラムの実行はターミナルでrubyコマンドを使用します。

# rubyルビーコマンド
# rubyコマンドはRubyに関するさまざまな操作が実行できるコマンドです。
# すでに環境構築でRubyのインストールを終えているため、rubyコマンドが使用可能です。

# Rubyファイルをプログラムとして実行するためには、
# ターミナルにruby [実行したいRubyファイルのパス]と打ち込みます。

# 【例】rubyコマンド
# 1
# 2
# # Rubyファイルの実行
# % ruby sample.rb
# helloworld.rbを実行しましょう
# 今回、実行したいファイルは「helloworld.rb」ですね。
# カレントディレクトリがrubyディレクトリになっているかを確認して、次にhelloworld.rbファイルが直下にあるか確認しましょう。

# helloworld.rbファイルがあれば、実行します。

# ターミナル
#  1
#  2
#  3
#  4
#  5
#  6
#  7
#  8
#  9
# 10
# # カレントディレクトリを確認
# % pwd
# /Users/ユーザー名/ruby

# # ディレクトリの中身を確認
# % ls
# helloworld.rb

# # Rubyファイルを実行
# % ruby helloworld.rb
# lsコマンドでディレクトリの中身を確認すると、直下にhelloworld.rbがありました。
# そのため、相対パスならばhelloworld.rbと指定するだけです。

# Rubyファイル実行gif

# ちゃんとターミナル上に「Hello World」と表示されたでしょうか？
# もし何も表示されない場合は、テキストエディタで保存できていないことが考えられます。

# 保存ができているかどうかを確かめる方法があります。
# 次のようにファイル名の横がマルになっていると保存ができていない印です。
# 未保存vscode

# command[⌘] + Sで保存をした後はバツになっています。

# 保存済vscode

# これで保存ができているという印になります。今後カリキュラムを進めていく上で知っていると便利ですのでぜひ覚えておいてください。

# 以上で、はじめてのプログラム記述と実行が終わりました。
# 今後もこのようにRubyファイルを実行していくので、忘れないようにしましょう。

# コードを書く上での留意点
# プログラミングに慣れてくるまで、コードを書く際にいくつか気をつける点があるので学んでおきましょう。

# コメントを書こう
# HTML・CSSでは、<!-- -->や/* */でコメントを書くことができました。
# Rubyもプログラム中にコメントを書くことができます。コメントはプログラムの実行時に無視されるので、外部に公開しない限りは何を書いても問題ありません。

# Rubyファイルでコメントアウトするにはコメントにしたい文字の先頭に#を記述します。
# #の記述から改行されるまでは、コメント扱いとなります。

# 【例】Rubyファイル
# 1
# 2
# 3
# 4
# 5
# # ここからは改行するまでコメント。何を書いても動作に影響しません。

# puts "Hello World"   # 実行される

# # puts "Hello World" # 実行されない
# 2つめに記述されたputs "Hello World"は、その行頭に#が記述されているのでコメントアウトされ、実行されません。

# helloworld.rbにコメントを書いて実行しましょう
# helloworld.rbのソースコードをすべて消して、以下のソースコードを追記しましょう。

# ruby/helloworld.rb
# 1
# 2
# 3
# 4
# 5
# # これはHello Worldと表示するプログラムです
# puts "Hello World"

# # これはコメントアウトされるため何も処理を行いません
# # puts "こんにちは世界"
# コメントを追加したのでターミナルで実行してみましょう。

# ターミナル
# 1
# % ruby helloworld.rb
# 表示はいかがでしたか？
# 「Hello World」しか表示されないはずです。