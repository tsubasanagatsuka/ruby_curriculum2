# class Car 
#   def ride_car(ride_number)
#     @ride_number = ride_number
#   end
# end

# fire_truck = Car.new()
# fire_truck.ride_car(3)

class Car

  def initialize(car_name, car_model, capacity)
    @name = car_name
    @model = car_model
    @capacity = capacity
  end

  def self.run
    puts "走行します"
  end

  def ride_car(ride_number)
    @ride_number = ride_number
    if ride_number > @capacity
      puts "#{@name}は、乗車定員が#{@capacity}人なので、#{@ride_number}人は乗れません。"
    else
      puts "#{@ride_number}人乗車できました。"
    end
  end

end

fire_truck = Car.new('消防車', '大型車', 5)
fire_truck.ride_car(6)

Car.run


概要
この章では、クラスの中に定義するクラスメソッドとインスタンスメソッドを学びます。
値がどのようなデータを持ち、どのような動作をするのかを決める方法を学びましょう。

目的
クラスメソッドの定義と使用方法を理解すること
インスタンス変数の定義と使用方法を理解すること
クラスとインスタンスを利用するメリットを理解すること
クラスメソッドとインスタンスメソッド
値を作ることで、現実世界のあらゆる「もの」をコードで表現することが可能です。
これにより、同じ種類でも、その中でそれぞれ個性があるようなものも表現できます。
たとえば人間を表現する場合は、属性として身長・性別、動作に食べる・笑うなどをクラスに定義しておけば、あとは個別のデータを追加してインスタンスを生成します。

データが持つ動作となるメソッドの定義の仕方について理解しましょう。

現実世界の「もの」には、できる動作とできない動作があります。
たとえば、車はアクセルやブレーキを踏むと「加速する」「減速する」という動作ができますが、人間のような「食べる」「笑う」という動作はできません。人間にとってみても車が持つ動作はできません。

モノの動作

この現実世界の「もの」のように、クラスとインスタンスでデータを作る場合も、
それぞれの動作、つまりメソッドをあらかじめ決めておきます。

すでにRubyで用意されていたクラスから作られる文字列や数値などにも、それぞれの持つ動作がメソッドとして用意されており、使用できていました。

https://tech-master.s3.amazonaws.com/uploads/curriculums//c3ba1f420af6f6b61da56f7a86e83413.png

このように値には動作（メソッド）を用意できることが分かりました。
メソッドはクラスに定義しますが、それぞれクラスメソッドとインスタンスメソッドの2種類があります。

それでは、class.rbを書き換えながらクラスメソッドとインスタンスメソッドを学びましょう。

データによって変わる処理を定義しよう
値が持つ情報には、同じ種類であっても個別の情報になるものがあります。
たとえば文字列であれば、同じ文字列クラスから生成された文字列でも「こんにちは」や「どうも」という個別の情報を持った文字列になります。

どちらにもlengthメソッドが使用できますが、個別の情報を使用しているため返ってくる値が異なります。
「文字数を返す」という意味では同じ動作でも、個別の情報を利用するため結果が異なるのです。

https://tech-master.s3.amazonaws.com/uploads/curriculums//1a37e67f111c14df9da7fd3e9786b522.png

このような個別の情報を使用する動作は、インスタンスメソッドとして定義します。

 インスタンスメソッド
インスタンスが使用できるメソッドです。クラスに定義しておきます。
「インスタンスメソッドを定義したクラス」から生成されるインスタンスが使用できます。

インスタンスメソッドは、インスタンスごとの個別の情報（属性値）を使った処理に使用します。

インスタンスメソッドの定義は以下のようにクラスに記述します。

【例】インスタンスメソッドの定義
1
2
3
4
5
class クラス名
  def メソッド名
    # 処理
  end
end
クラスの中に記述しているだけで、これまでのメソッドの定義と同様ですね。
呼び出し方法もメソッドと同様です。

【例】インスタンスメソッドの呼び出し
1
インスタンス名.メソッド名(引数)
それでは実際にインスタンスメソッドを定義してみましょう。

 class.rbを編集しましょう
class.rb
1
2
3
4
5
6
7
8
9
class Car

  def ride_car()
  end

end

fire_truck = Car.new()
fire_truck.ride_car()
ここではCarクラスの中に、ride_carメソッドを定義しました。続いて8行目でCarクラスのインスタンスを生成し、fire_truckという変数に値を代入しています。そして9行目で、さきほどのride_carメソッドを呼び出しています。しかし、ride_carメソッド内に処理をまだ記述していないので、コードを実行しても何も処理は行われません。

この処理の記述をする際に重要なのがスコープです。

メソッドと引数の関係で学んだスコープについて覚えているでしょうか？
メソッドの外で定義した変数はメソッドの中では使えず、メソッドの中で定義した変数はそのメソッドの中でしか使用できないのでした。これはクラスの中でも同様です。

ここで、特殊な変数を使うことになりますが、
その説明の前に、属性と属性値について整理しておきましょう。

 属性と属性値
属性は、データの性質となる情報のことです。
それぞれに当てはまる値を属性値と呼びます。

たとえば赤色の車の場合、属性「color(色)」は「red(赤)」という属性値を持ちます。

属性と属性値

この考え方と同じように、クラスではデータがどのような属性を持つのかを決めておくことができます。そして、生成したインスタンスごとに属性値を個別に持たせて実体を作ります。人間が生まれた時から「性別」「血液型」という属性を持っていても、それぞれの属性値が「男性」や「女性」、「AB型」や「O型」のように異なることと同じです。

こうした個別の情報となる属性の定義には、インスタンス変数を用います。

 インスタンス変数
インスタンス、すなわちデータが持つ属性を定義する変数です。
定義しておくことですべてのインスタンスが同じ属性を持つことになりますが、その属性値は、個々のインスタンスによって別々に設定できます。

インスタンス変数

インスタンス変数は、クラス内のメソッドの中で、変数名の始めにアットマーク@を1つつけて定義します。

【例】インスタンス変数の定義
1
2
3
4
5
class クラス名
  def メソッド名
    @変数名 = 値  # インスタンス変数
  end
end
インスタンス変数の値は、生成されたインスタンスが個別に持つことができるため値は別々にできます。

また、インスタンス変数のスコープは、そのクラスのすべてのインスタンスメソッドです。つまりインスタンス変数は、インスタンスが個別に持つ属性値が入り、そのインスタンスのすべての動作に使用できる変数ということになります。

それでは先ほど編集したclass.rbのCarクラスにもインスタンス変数を使い、インスタンスが個別に持つ属性値を使用できるようにしましょう。

 class.rbを編集しましょう
class.rb
1
2
3
4
5
6
7
8
class Car
  def ride_car(ride_number)
    @ride_number = ride_number
  end
end

fire_truck = Car.new()
fire_truck.ride_car(3)
3行目で、ride_numberを@ride_numberというインスタンス変数に代入しています。これによって、8行目で引数を3としてride_carメソッドを呼び出したとき、@ride_numberには3という値が代入され、Carクラス内のすべてのインスタンスメソッドで使用できるようになりました。

クラス全体で共通の結果を返す処理を定義しよう
インスタンスが持つ個別の情報を元に行う動作を定義できました。
インスタンスメソッドは、インスタンスから呼び出すメソッドでしたが、クラスから呼び出すメソッドもあります。

個別の情報によらず、共通の結果を返す動作を定義するクラスメソッドを学びましょう。

 クラスメソッド
クラスが使用できるメソッドです。クラスメソッドを定義したクラス自身が使用できます。クラスで共通の情報を使った処理に使用します。

クラスメソッドの定義は以下のようにクラスに記述します。

【例】クラスメソッドの定義
1
2
3
4
5
class クラス名
  def self.メソッド名
    # 処理
  end
end
 定義には<<を用いる方法などもありますが、本カリキュラムではselfを使用する方法に統一します。
メソッド名の前にselfを.(ドット)で繋いで定義します。
呼び出し方はこれまでのメソッドと同様ですが、クラスから呼び出すという点が異なります。

【例】クラスメソッドの呼び出し
1
クラス名.メソッド名(引数)
代表的なクラスメソッドには、これまでインスタンスを生成する際に使用してきたnewメソッドがあります。

【例】newメソッド
1
2
# インスタンスを生成するためにクラスメソッドとして定義されている
user = User.new
それでは実際にクラスメソッドを定義してみましょう。

 class.rbを編集しましょう
class.rb
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
class Car

  def self.run
    puts '走行します'
  end

  def ride_car(ride_number)
    @ride_number = ride_number
  end

end

fire_truck = Car.new()
fire_truck.ride_car(3)

Car.run
3行目でクラスメソッドとしてrunメソッドを定義しました。そして16行目でrunメソッドを呼び出しています。

それぞれのメソッドと変数の違いを整理しよう
クラスの中に定義する2種類のメソッドを学びました。
それぞれの役割を比較して、違いを理解しましょう。

https://tech-master.s3.amazonaws.com/uploads/curriculums//566ac8b29d9ba67a961cd98b0ac3fd80.png

インスタンスメソッドに使用する属性を定義するために、インスタンス変数を学びました。
クラスで登場する変数では、これまで@をつけずに定義していた変数をローカル変数と分けて呼びます。
ローカル変数とインスタンス変数を比較して違いを理解しましょう。

https://tech-master.s3.amazonaws.com/uploads/curriculums//dce609dd04332b846327fbe370371f11.png

データを作ったときに行う処理を定義しよう
インスタンスの生成と同時に実行して欲しい処理がでてくることがあります。

その場合に使用すると便利なinitializeメソッドを学び、アプリ完成まで進めましょう。

 initializeイニシャライズメソッド
インスタンスが生成された瞬間に、生成されたそのインスタンスが実行する処理を定義するインスタンスメソッドです。

initializeメソッド

Rubyのクラスから生成されるすべてのインスタンスにはこのinitializeメソッドが用意されており、クラスに何も記述しなくてもinitializeメソッドは自動で実行されています。この場合のinitializeメソッドは基本的に何も処理は行いません。

もしインスタンス生成時に何か処理を行いたい場合は、
新たにinitializeメソッドを定義して処理を記述する必要があります。

【例】initializeメソッドの定義と実行
1
2
3
4
5
6
7
8
class クラス名
  def initialize
    # インスタンス生成したときに実行される処理（以下は例）
    puts "クラス名のインスタンスが生成されました"
  end
end

インスタンス = クラス名.new  # initializeメソッドが呼ばれ文字が表示される
それでは、Carクラスにinitializeメソッドを定義してみましょう。

 class.rbを編集しましょう
class.rb
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
class Car

  def initialize(car_name, car_model, capacity)
    @name = car_name
    @model = car_model
    @capacity = capacity
  end

  def self.run
    puts '走行します'
  end

  def ride_car(ride_number)
    @ride_number = ride_number
  end

end

fire_truck = Car.new('消防車', '大型車', 5)
fire_truck.ride_car(3)

Car.run
car_name、car_model、capacityの３つを、fire_truckのインスタンスを生成する際に引数として渡しました。
さらに、class内で使用できるようにinitializeメソッドを定義して、インスタンス変数を宣言しました。

最後に、今まで学習したif文などを使用して、ride_carメソッドに追記してみましょう。

 class.rbを編集しましょう
余分なスペースや改行も取り除きました。

class.rb
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
class Car
  def initialize(car_name, car_model, capacity)
    @name = car_name
    @model = car_model
    @capacity = capacity
  end

  def self.run
    puts '走行します'
  end

  def ride_car(ride_number)
    @ride_number = ride_number
    if ride_number > @capacity
      puts "#{@name}は、乗車定員が#{@capacity}人なので、#{@ride_number}人は乗れません。"
    else
      puts "#{@ride_number}人乗車できました。"
    end
  end
end

fire_truck = Car.new('消防車', '大型車', 5)
fire_truck.ride_car(3)

Car.run
さきほどinitializeメソッドで定義したインスタンス変数によって、ride_carメソッド内でも@name、@capacityの値が使用できるようになっています。

以上で、Rubyの基礎すべての学習は終了です。
プログラミング言語を使ったアプリケーションの作成に向けて、もしこのレッスンの内容でわからないことがあれば振り返って、理解しておきましょう。

