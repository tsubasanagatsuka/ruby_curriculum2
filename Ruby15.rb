
概要
この章では、レスポンスとして返す見た目を決めるビューを学びます。
Rubyを埋め込んだHTMLで見た目を作りましょう。

目的
ビューの役割と生成方法を理解すること
テンプレートエンジンの役割を理解すること
ERBの記述方法を理解すること
ビュー
レスポンスとして返す見た目を決めよう
コントローラーにアクションを定義して、処理を記述できるようになりましたが、ブラウザに何も表示されなければ、Webアプリケーションとしては成り立ちません。

Webアプリケーションには処理だけでなく、アクションを実行したあとに、ブラウザに表示する画面の見た目を決めるビューが必要です。

 ビュー
ビューは、MVCの役割の1つです。
ブラウザにレスポンスとして返す見た目を設定します。

Railsの全体像を確認してビューの立ち位置を見てみましょう。

ビュー_全体像

コントローラーは、アクションを処理した後に、対応するビューに該当するファイルを探して、レスポンスとして返します。

たとえば「トップページを表示して」というリクエストをコントローラーが処理する際、トップページの内容が記載されたビューを探し出す必要があります。

ビューを作成しよう
ブラウザに表示できるのは、HTMLファイルだけですが、Webアプリケーションとしてはデータを扱って表示したいので、Rubyを使用したいところです。

データをHTMLでも使用したいときは、Rubyを埋め込むことができるERBという仕組みを使用します。

 ERB（Embedded Ruby）イーアールビー（エンベデッド ルビー）
ERBは、テンプレートエンジンと呼ばれる仕組みを持ったものの1つです。

テンプレートエンジンとは、雛形となるテンプレートと、そのテンプレートにデータとなる記述を埋め込むことで、最終的に別のファイルとして生成できる仕組みのことです。

https://tech-master.s3.amazonaws.com/uploads/curriculums//b481b8035553e386dfc44c14151b20ec.png

ERBは、HTMLにRubyの記述を埋め込むことができるテンプレートから、HTMLファイルを生成できるテンプレートエンジンです。

ちなみに、ERBは「Embedded Ruby」の略です。拡張子には、.erbを使用します。

 ○○.html.erbエイチティーエムエルイーアールビーファイル
RailsにおけるERBファイルは、○○.html.erbという名前で作成します。
○○には、対応するアクション名を記入します。ビューとしての役割を持つため、カリキュラムではビューファイルと呼びます。

Railsは、このビューファイルを元にHTMLファイルを書き出して、最終的にレスポンスに含めて返すことでブラウザに画面を表示させます。

Rubyのコードを埋め込む方法は、ビューファイルを作成した上で学んでいきましょう。

 ビューファイルを作成しましょう
app/views/postsディレクトリを二本指でクリックし、index.html.erbを作成しましょう。

https://tech-master.s3.amazonaws.com/uploads/curriculums//ea02c5e7e5f107dc58c18164dbda4a3a.gif

 app
 views
 posts
 index.html.erb
作業チェック
 index.html.erbを作成できた
ビューにHTMLを書いてみよう
現状、index.html.erbの中身は空っぽなので、中身を記述していきましょう。

 ビューファイルを編集しましょう
まずはHTMLを記述してみましょう。
今回はトップページの実装をしているので、以下のように記述しましょう。

app/views/posts/index.html.erb
1
<h1>トップページ</h1>
 ブラウザで確認しましょう
それでは現状がどのようになっているか、ブラウザを再読み込みして確認してみましょう。サーバーを起動していない場合はターミナルでrails sをした上で確認しましょう。

http://localhost:3000/posts
https://tech-master.s3.amazonaws.com/uploads/curriculums//0251e667747fd7afc6cda0b130a0e761.png

上記のように「トップページ」と表示されていれば問題なく実装できています！

ビューにRubyを書いてみよう
ここまでで、ビューを表示させることに成功しました。

次に、データを扱って表示するために、Rubyを埋め込む方法について学びましょう。
さらに、ビューはコントローラーから情報を受け取ることができるため、その方法も学びましょう。

コントローラーのアクション内にインスタンス変数を定義しておくことで、その情報を持つ変数を使用できます。

少しわかりにくい概念であるため、ここでは一度実装してからどのような仕組みなのか、確認していきましょう。

 コントローラーでインスタンス変数を定義しましょう
ここでは@postというインスタンス変数に、文字列を代入します。

app/controllers/posts_controller.rb
1
2
3
4
5
class PostsController < ApplicationController
  def index
    @post = "これはコントローラーで定義したインスタンス変数を確認するための文字列です"
  end
end
 ビューファイルを編集しましょう
これまでHTML内にRubyの記述は書くことはできませんでした。
しかし、Railsフレームワーク内のビューファイルでは、ERBの記法を用いることでRubyのコードを埋め込むことができます。ERBの記法については本章で後ほど説明します。

まずは表示を確認するため、以下の通り記述していきましょう。

app/views/posts/index.html.erb
1
2
<h1>トップページ</h1>
<%= @post %>
 ブラウザで確認しましょう
上記まで完了したらブラウザを再読み込みして確認してみましょう。
以下のようにコントローラーで定義した文字列が表示されていれば成功です。

https://tech-master.s3.amazonaws.com/uploads/curriculums//3c90ef312da16ee9c59b6c10a463b2d5.png

それではなぜこのような仕組みになるのかを、次のステップで学んでいきましょう。

ビューでデータが使える仕組みを理解しよう
コントローラーで定義したインスタンス変数は、対応するビューで使用することができます。

今回の場合では、postsコントローラーのindexアクションでインスタンス変数を定義したので、postsディレクトリのindex.html.erbでそのインスタンス変数を用いることができます。

https://tech-master.s3.amazonaws.com/uploads/curriculums//4fdc16fa610f7a2f38a9196c535d9ceb.png

現在このインスタンス変数には文字列が含まれていますが、一般的な使用例は、コントローラーでデータベースから取得したデータなどを代入します。データベースからデータを取得する方法は、後の章で学びます。

ビューファイルでインスタンス変数などのRubyの記述を用いるには、ERBの特殊な記法を用います。

 Rubyコードの埋め込み
ERBファイルでは、Rubyのコードを使用するためのタグが用意されています。

以下のように<%= %>というタグでRubyのコードを囲うことで、そのコードの結果をHTMLに埋め込むことができます。

【例】
1
<%= @post %>  <%# RubyコードをHTMLに埋め込む %>
また、上記の例のように<% %>の中に#を用いると、Rubyファイルの時と同様にコメントアウトすることができます。

上記の例は、HTMLにRubyのコードを埋め込み、画面上に表示させる記述方法でした。
一方で、画面上に表示をさせなくても良いRuby記法（if文や、each文など）の場合には、=を抜いて<% %>でコードを囲います。
たとえば以下のような表記にすると、インスタンス変数に定義した文字列は表示されなくなることがわかります。試しにindex.html.erbを修正してみましょう。

【例】
1
<% @post %>   <%#  RubyコードをHTMLに埋め込むが表示はされない %>
文字列が表示されないことを確認できたら、元に戻しておきましょう。

練習問題
本章で学んだことを問題を解きながら復習しましょう。問題を解く際は、カリキュラムを見てはいけません。思い出すという行動をすることで、より一層の知識定着が可能となります。

不明点は次のカリキュラムに進む前に復習し、満点をとれるまで解き直しましょう。それまで次のカリキュラムに進まないようにしてください。以降のカリキュラムは、これまで学んだ内容が身についている前提で進むからです。


問題.1
ビューファイル
テンプレートエンジンという仕組みを使って、HTMLファイルにRubyのコードを埋め込むことができます。 Railsのビューファイルにおける、テンプレートエンジン名を表した拡張子を答えてください。

回答
1
解答を貼り付けてください。
1
2
ERB
# コードブロックは上のように```の直後に言語名を指定してください。
模範解答
模範解答
1
.erb
RailsにおけるERBファイルは、○○.html.erbという名前で作成します。

※正しく解答できて2点。1箇所でも誤っていれば0点。

この回答の点数を入力してください。
0
点配点2点
問題.2
ビューファイルの配置
articlesコントローラーのindexアクションを定義しました。これに対応するファイル名とそのディレクトリは以下です。

1
app/views/【  A  】/【  B  】
【A】にはディレクトリ名が、【B】にはファイル名が入ります。それぞれ答えてください。

回答
1
解答を貼り付けてください。
1
2
3
srticles
index
# コードブロックは上のように```の直後に言語名を指定してください。
模範解答
模範解答
1
2
A：articles
B：index.html.erb
ビューファイルは、「コントローラー名と同じディレクトリ」に「アクション名と同じファイル」として存在する必要があります。

＊各2点。合計4点。

この回答の点数を入力してください。
0
点配点4点
問題.3
コントローラーに定義した変数の表示
コントローラーに定義した変数を、ビューファイルで指定してブラウザで表示したいです。
そこで、以下のようにコントローラーとビューファイルを設けました。ただし、以下のコードでは2つの問題があって正しくデータは表示されません。

コントローラー

1
2
3
4
5
class PostsController < ApplicationController
  def index
    post = "これはコントローラーで定義した変数を確認するための文字列です"
  end
end
ビュー

1
2
<h1>トップページ</h1>
<% @post %>
2つの問題点が何か答えてください。ただし、ビューファイルの配置は正しくできているものとします。

回答
1
解答を貼り付けてください。
1
2
3
@post
<%= @post %>
# コードブロックは上のように```の直後に言語名を指定してください。
模範解答
模範解答
1
2
① コントローラーに定義した変数がインスタンス変数になっていない
② ERBタグに = が抜けている
ビューファイルに渡したい変数は、インスタンス変数にする必要があります。また、ERBタグには2種類あり、ブラウザに表示したい内容には=が付きます。

ちなみに、正しいコードは以下です。

コントローラー

1
2
3
4
5
class PostsController < ApplicationController
  def index
    @post = "これはコントローラーで定義した変数を確認するための文字列です"
  end
end
ビュー

1
2
<h1>トップページ</h1>
<%= @post %>
