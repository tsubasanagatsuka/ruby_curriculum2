
概要
この章では、データの保存場所となるテーブルを作成し、そのテーブルの管理役となるモデルを作成する方法を学びます。

目的
モデルの役割と生成方法を理解すること
マイグレーションファイルの役割と記述方法を理解すること
マイグレーションファイルの実行方法を理解すること
テーブルの役割を理解すること
データベースとテーブル
データの保存場所を理解しよう
データが保存できていなければ、Webアプリケーションとして成り立ちません。

たとえばメルカリやラクマなどの「フリマアプリ」であれば、出品された商品情報がデータベースに保存されているからこそ、「フリマアプリ」のトップページにアクセスすればそれらの商品情報を見ることができています。

https://tech-master.s3.amazonaws.com/uploads/curriculums//529aadd136d1961bab97d66a3cf083e0.png

今回のFirstAppでもデータベースが必要となるため、すでに作成済みです。
しかし、データベースには、ただデータをひたすら保存すれば良いというわけではありません。

FirstAppは、投稿のデータしか存在しませんが、他のアプリケーションを考えるとさまざまなデータを管理しています。

たとえば「フリマアプリ」であれば、商品の情報、ユーザーの情報、ユーザー同士のチャットのやりとり、といったデータを管理しています。もしデータベースにこれらがごちゃまぜになっていたら、データを整理することができません。

保存するためには、データベースの中に、データの種類ごとの保存場所となるテーブルを用意します。

 テーブル
テーブルとは、データベース内に作成される、データを表形式で収納する場所です。

データベースには、そのままデータを直接保存することはできない仕組みになっています。したがって、データベースに目的に沿ったテーブルを用意し、テーブルにデータを保存して管理します。

https://tech-master.s3.amazonaws.com/uploads/curriculums//f1f9f6e384840671f4cb892097ef8595.png

 レコードとカラム
表形式のテーブルにおいて、行はレコード、列はカラムと表現します。

レコードとカラム

モデル
データの管理役を作ろう
データベースにテーブルを用意してデータを保存するからこそ、Webアプリケーションはそれらを利用して画面上にさまざまなデータが表示できるということがわかりました。

どのようにすればテーブルにデータを保存したり、取得して画面上に表示することができるのでしょうか。

テーブルの管理には、モデルが必要になります。
以下の図の通り、モデルを介して、コントローラーでデータを取得し、画面に表示するのです。

モデル_MVC全体像

 モデル
モデルは、MVCの役割の1つです。
Railsの中でデータベースへのアクセスをはじめとする情報のやりとりに関する処理を担当しています。実はもっと多くの役割がモデルにはありますが、現状ではこの認識で問題ありません。

モデルがあれば、データベースにあるテーブルをRailsで管理できるようになります。すなわち、テーブルごとに整理された情報は、モデルに対応しているのです。
https://tech-master.s3.amazonaws.com/uploads/curriculums//81497e7b6c1b293e0f2eebc4c72dc894.png

モデルを作成しよう
モデルの概要についてはざっくりと理解できたと思います。
もしこの時点でピンと来ていなくても、まったく気にする必要はありません。Webアプリケーションの概念は、実際に作ってみないとわからないことも多いからです。

それでは作業を始めていきましょう。
モデルはRailsアプリのディレクトリで、rails g modelコマンドを実行することで作成できます。

 rails g modelレイルズ ジー モデルコマンド
モデルやそれに付随するファイルを一度に作成してくれるコマンドです。以下のような形で実行します。

【例】
1
2
# モデルを作成
% rails g model モデル名
モデルの命名規則は、単数形を使用することです。
たとえば、本の情報を管理する場合は「book」、顧客の情報を管理する場合は「client」という名前になります。
コントローラーは複数形でした。混同しないように注意しましょう。

 postモデルを作成しましょう
コントローラーの名前は「posts」でしたが、今回はその単数形の「post」という名前になります。以下のコマンドを実行しましょう。

ターミナル
1
2
3
4
5
# first_appディレクトリにいることを確認
% pwd

# postモデルを作成
% rails g model post
 サーバーを起動している場合は、一度サーバーを終了するか、command[⌘]+Tで新しいターミナルのタブを用意してからrails gコマンドを実行しましょう
コマンドを実行して以下のような処理が表示されれば成功です。

【例】ターミナル
1
2
3
4
5
6
7
Running via Spring preloader in process 27169
      invoke  active_record
      create    db/migrate/20200315054113_create_posts.rb
      create    app/models/post.rb
      invoke    test_unit
      create      test/models/post_test.rb
      create      test/fixtures/posts.yml
コントローラーを作成したときと同様に、複数のファイルが生成されました。
ここではまず、createで記載されているファイルの中の、app/models/post.rbに注目しましょう。こちらのファイル自体が今回作成したpostモデルです。

 app
 models
 post.rb
作業チェック
 rails g model postとコマンドを実行して、post.rbファイルを作成することができた
マイグレーション
テーブルの仕様を決めよう
rails g modelコマンドでモデルを作成したとき、db/migrate/ディレクトリに20XXXXXXXXXXXX_create_posts.rbというファイルが生成されました。

 ファイル名のXXXに入る数字には、作成した日時等が含まれているため、都度変動します。
 db
 migrate
 20XXXXXXXXXXXX_create_posts.rb
こちらのファイルは、データベースにテーブルを作成する重要な役割を持っています。
db/migrate/ディレクトリに入っているファイルは、マイグレーションという役割を持ちます。

 マイグレーション
マイグレーションは、テーブルの設計図・仕様書です。どのようなテーブルにするのかをマイグレーションファイル内へ記載します。

下図のように、マイグレーションファイルを記述して、アプリケーションに付随するデータベースのテーブルに情報を反映します。

マイグレーション

モデルを作成した際に、db/migrate/20XXXXXXXXXXXX_create_posts.rbというマイグレーションファイルも作成されていたのは、モデルは1つのテーブルを管理する場合が多いためです。

マイグレーションを書こう
現在、モデルは作成できていても、そのモデルが管理するテーブルは作成できていません。
まずは、マイグレーションを編集して、どのようなテーブルにするか決めましょう。

 マイグレーションファイルを編集しましょう
テキストエディタでマイグレーションファイルが開けたら、以下のような記述になっているか確認しましょう。

【例】db/migrate/20XXXXXXXXXXXX_create_posts.rb
1
2
3
4
5
6
7
8
class CreatePosts < ActiveRecord::Migration[6.0]
  def change
    create_table :posts do |t|

      t.timestamps
    end
  end
end
3行目に注目しましょう。create_table :posts do |t|と書かれていることから、「実際にpostsテーブルを作成する」という仕様がマイグレーションファイルに記載されています。

こちらを以下のように編集しましょう。

 マイグレーションファイルはrails g modelのとき、モデルと一緒に生成されています。db/migrateディレクトリを確認して、編集をしましょう。これは以降も同様です。
db/migrate/20XXXXXXXXXXXX_create_posts.rb
1
2
3
4
5
6
7
8
class CreatePosts < ActiveRecord::Migration[6.0]
  def change
    create_table :posts do |t|
      t.text :memo
      t.timestamps
    end
  end
end
上記のように記載することで、memoカラムを追加できます。
t.に続くのがカラムの型、その右側にシンボルで記載されるものがカラム名です。

 カラムの型
カラム名を指定するとともに、そこにどんなデータが入るのかを示す「型」も指定する必要があります。Rubyに値の種類があったことと同じような考え方です。

以下に、主なカラムの型の種類を紹介しておきます。

カラムの型	説明	用途
integer	数値	金額、回数など
string	文字(短文)	ユーザー名、メールアドレスなど
text	文字(長文)	投稿文、説明文など
boolean	真か偽か	はい・いいえの選択、合格・不合格のフラグなど
datetime	日付と時刻	作成日時、更新日時など
マイグレーションファイルにはデフォルトでtimestampsが記載されていますが、こちらは型の名称ではなく、Railsが独自に用意している特別なものです。ここではまだ気にする必要はありません。

マイグレーションを実行しよう
現状では、テーブルの設計図であるマイグレーションの記入まで完了しています。しかし、記入しただけではデータベースを変更することはできません。

データベースの変更をするためには、テーブル情報の記入を終えたマイグレーションを実行する必要があります。

マイグレーションの実行には、Railsアプリのディレクトリでrails db:migrateコマンドを使用します。

 rails db:migrateレイルズ ディービー マイグレートコマンド
マイグレーションに記述した内容を、データベースに適用するためのコマンドです。

マイグレート

このマイグレーションファイルを実行する動作は、マイグレートと呼ばれることもあります。

 マイグレーションを実行してテーブルを作成しましょう
以下のコマンドを実行してマイグレーションを実行し、データベースにテーブルを追加しましょう。

ターミナル
1
2
3
4
5
# first_appのディレクトリにいることを確認
% pwd

# マイグレーションを実行
% rails db:migrate
上記のコマンドを実行して、以下のような表示がされたら成功です。皆さんの実行結果と数字は同じにはなりません。

【例】ターミナル
1
2
3
4
== 20XXXXXXXXXXXX CreatePosts: migrating ======================================
-- create_table(:posts)
   -> 0.0395s
== 20XXXXXXXXXXXX CreatePosts: migrated (0.0396s) =============================
それでは、実際にテーブルが作成できているのか、Sequel Proで確認をしましょう。

 テーブルを確認しましょう
まずSequel Proを起動したら、以下のように、first_app_developmentデータベース内に「posts」テーブルが作成されているか確認をしましょう。

https://tech-master.s3.amazonaws.com/uploads/curriculums//b7477e60cd43e8462fdcc3e1a984bca3.png

もしpostsテーブルが見当たらない場合は、以下の更新ボタンを押して、データベース情報を更新してから確認してみましょう。それでも見当たらない場合は、メンターに相談しましょう。

https://tech-master.s3.amazonaws.com/uploads/curriculums//e6f6a7ef28471b006fbb492748712380.png

「posts」テーブルをクリックすると、以下のようにテーブルの中身を確認できます。先ほどマイグレーションに記載した、「memo」カラムが追加されていることが確認できます。

https://tech-master.s3.amazonaws.com/uploads/curriculums//b3d0d44737785d3a18c08c48318f4778.png

その他のカラムはデフォルトで生成されるものです。

マイグレーションを修正しよう
マイグレーションを編集し、実行することで、テーブルの作成ができました。

もし、テーブルが持つカラムの内容を修正したい場合はどうすればよいでしょうか。

先ほど実行したマイグレーションを編集して、再度実行することが考えられます。
しかし、マイグレーションは、一度実行すると再度実行できない仕組みになっています。

これは、設計書であるマイグレーションを履歴として残し、どのような変更が行われてきたか見ることができるようにするためです。

https://tech-master.s3.amazonaws.com/uploads/curriculums//e99e48f48479350c07d06988e302e1ee.png

マイグレーションを新しく作成して実行すれば、修正も追加もできます。

しかし、誤字などのケアレスミスなど、履歴に残す必要のないほど軽微な修正を行う場合は、変更を差し戻してすぐに編集して実行し直したいところです。

マイグレーションを差し戻して、テーブルの内容を修正する方法を学びましょう。
マイグレーションを差し戻すには、rails db:rollbackコマンドを使用します。

 rails db:rollbackレイルズ ディービー ロールバックコマンド
マイグレーション実行による変更を差し戻すためのコマンドです。
ロールバック→マイグレーションファイルの修正→マイグレートで、テーブルを修正できます。

ロールバック

ターミナルで実行すると、以下のような表示が出て変更が差し戻されます。

【例】ターミナル
1
2
3
4
== 20200315054113 CreatePosts: reverting ======================================
-- drop_table(:posts)
   -> 0.1939s
== 20200315054113 CreatePosts: reverted (0.2332s) =============================
この動作は、ロールバックと呼ばれることがあります。

 rails db:migrate:statusレイルズ ディービー マイグレート ステータスコマンド
マイグレーションが実行済みであるかをファイルごとに調べるコマンドです。

状態をあらわすステータスには、upとdownの2種類があります。
実行済みのファイルはupと表示されるため、修正するためにはロールバックする必要があります。適用されていないときは、downと表示され、そのまま修正や削除が可能です。

 マイグレーションの状況を確認しましょう
まずは、rails db:migrate:statusコマンドでマイグレーションファイルの状況を確認します。以下のコマンドを実行しましょう。

ターミナル
1
2
# マイグレーションファイルの状況を確認
% rails db:migrate:status
すると、以下のように表示されます。Migration IDは、皆さんの環境とカリキュラムでは異なります。

【例】ターミナル
1
2
3
4
5
database: first_app_development

 Status   Migration ID    Migration Name
--------------------------------------------------
   up     20190820071210  Create posts
Statusがupになっていることから、下図のようにマイグレーションファイルが実行された状態になっています。

upステータス

 マイグレーションを差し戻しましょう
マイグレーションファイルを修正できるように、rails db:rollbackコマンドでマイグレーションファイルを差し戻しましょう。

ターミナル
1
% rails db:rollback
ロールバックを実行したので、再度状態を確認しましょう。

ターミナル
1
% rails db:migrate:status
すると、以下のようにStatusがdownに変わったことがわかります。これでこのマイグレーションファイルを修正できます。

【例】ターミナル
1
2
3
4
5
database: first_app_development

 Status   Migration ID    Migration Name
--------------------------------------------------
  down    20190820071210  Create posts
downステータス

 マイグレーションファイルを編集しましょう
投稿の内容であることがわかりやすいように「content」というカラム名に変更します。

db/migrate/20XXXXXXXXXXXX_create_posts.rb
1
2
3
4
5
6
7
8
class CreatePosts < ActiveRecord::Migration[6.0]
  def change
    create_table :posts do |t|
      t.text :content
      t.timestamps
    end
  end
end
「memo」から「content」へ変更しました。あとはこのマイグレーションファイルを実行するだけです。

 マイグレーションを実行しましょう
修正したマイグレーションを実行して、テーブルをもう一度作成します。

ターミナル
1
2
# マイグレーションの実行
% rails db:migrate
これで、修正内容を反映したテーブルが作成されました。

 テーブルを確認しましょう
Sequel Proでテーブルを確認しましょう。以下のようにカラム名が修正できていることがわかります。

https://tech-master.s3.amazonaws.com/uploads/curriculums//12ad0c4105ccdd4103eaf80f84e82ad0.png

このようにして、マイグレーションは修正します。
カラムの名前や型を誤った状態でテーブルを作成してしまった場合に使用しましょう。

モデルの振り返り動画
動画でモデルの役割を理解しよう
ここまで多くのキーワードが出てきましたが、ここで動画を通して振り返っておきましょう。


チートシートのダウンロード
チートシートとは、通常であればカンニングペーパーのことを意味しますが、プログラミング学習の上では要点をまとめたシートを意味します。

これまで学んだRailsのフローについて以下のようにまとめました。ダウンロードして適宜見返すようにしましょう。

https://tech-master.s3.amazonaws.com/uploads/curriculums//583567194ca461ccc47b339bb7f8cac6.png

チートシートをダウンロードしましょう
以下のリンクからダウンロードできます。

ダウンロードリンク

練習問題
本章で学んだことを問題を解きながら復習しましょう。問題を解く際は、カリキュラムを見てはいけません。思い出すという行動をすることで、より一層の知識定着が可能となります。

不明点は次のカリキュラムに進む前に復習し、満点をとれるまで解き直しましょう。それまで次のカリキュラムに進まないようにしてください。以降のカリキュラムは、これまで学んだ内容が身についている前提で進むからです。

【練習問題 Ruby on Rails】データの保存場所と管理役を作ろう

この章の振り返り
要点チェック
 テーブルとは、データを表形式で収納する場所のこと。
 レコードとカラムとは、テーブルにおける「行」と「列」のこと。
 マイグレーションとは、テーブルの設計図のこと。
 モデルとは、Railsアプリケーションとデータベース間の情報のやり取りを担当する役割のこと。
 rails g modelコマンドとは、モデルと、それに付随するファイルを作成してくれるコマンドのこと。
 カラムの型とは、テーブルに格納される値の種類のこと。
 rails db:migrateコマンドとは、マイグレーションを記述したファイルをデータベースへ適用するためのコマンドのこと。
 rails db:rollbackコマンドとは、マイグレーション実行による変更を差し戻すためのコマンドのこと。
 rails db:migrate:statusコマンドとは、マイグレーションが実行済みであるかをファイルごとに調べるコマンドのこと。



問題.1
Rails全体の流れ
以下の図で、[1]~[5]に当てはまる語句を答えてください。



回答例

1
2
3
1：hogehoge
2：fugafuga
...
回答
1
解答を貼り付けてください。
1
2
3
4
5
6
7
1.db
2.routes
3.controller
4.view
5.model

# コードブロックは上のように```の直後に言語名を指定してください。
模範解答
模範解答
1
2
3
4
5
1：データベース
2：ルーティング
3：コントローラー
4：ビュー
5：モデル
この回答の点数を入力してください。
0
点配点3点
問題.2
テーブル1
以下を空欄に入る語句を答えてください。

1
データベースの情報は【  A  】ごとに管理されます。【  A  】は【  B  】に対応しています。
回答
1
解答を貼り付けてください。
1
2
3
テーブル
カラム
# コードブロックは上のように```の直後に言語名を指定してください。
模範解答
模範解答
1
2
A：テーブル
B：モデル
データベースの中のテーブルごとに、情報は振り分けられて保存されます。そしてそのテーブルはモデルに対応しています。

この回答の点数を入力してください。
0
点配点2点
問題.3
テーブル2
以下はテーブルについて解説した文章です。空欄に入る語句を答えてください。

1
テーブルは表形式です。行は【  1  】と呼ばれ、列は【  2  】と呼ばれます。


回答
1
解答を貼り付けてください。
1
2
3
１テーブル
２絡む
# コードブロックは上のように```の直後に言語名を指定してください。
模範解答
模範解答
1
2
1：レコード
2：カラム
1つひとつの情報は、レコードとして保存されていきます。また、レコードの中の情報を、カラムによってラベリングしています。

この回答の点数を入力してください。
0
点配点2点
問題.4
マイグレーションファイル
テーブルを作成するために、以下の操作を行いました。空欄に入る語句またはコマンドを答えてください。ただし、空欄には同じ語句が入ることもあります。

 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
マイグレーションファイルが作成できたので、中身を記述していきます。

まずはnameというカラムを定義します。nameというカラムは、文字（長文）なので型は【  A  】を指定しました。
続いて、priceというカラムを定義します。priceは数値（整数）なので型は【  B  】を指定しました。

マイグレーションファイルの記述を完了したので、テーブルに反映するために【  C  】というコマンドを実行しました。SequelProで確認したところ、正しくテーブルは作成できたようです。

しかしながら、その後すぐに先輩エンジニアから「nameというカラム名を、item_nameに変えて欲しい」と依頼をうけました。

したがって、【  D  】というコマンドを実行してマイグレーションファイルを差し戻し、nameをitem_nameに修正しました。

その後【  E  】というコマンドを実行して、テーブルに反映しました。
回答
1
解答を貼り付けてください。
1
2
3
4
5
6
string
integer
rails db:migrate
rails db:rollback
rails db:migrate
# コードブロックは上のように```の直後に言語名を指定してください。
模範解答
模範解答
1
2
3
4
5
A：text
B：integer
C：rails db:migrate
D：rails db:rollback
E：rails db:migrate
マイグレーションファイルを修正するときは、必ずrollbackをしてから修正することを覚えておきましょう。

