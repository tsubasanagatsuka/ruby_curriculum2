
概要
この章では、作成したテーブルにデータを追加し保存します。
Sequel Proから直接入力する方法と、コンソールを用いる方法の2種類を学びましょう。

目的
Sequel Proからデータを追加する方法を理解すること
コンソールの役割を理解すること
モデルが持つメソッドの役割と使用方法を理解すること
コンソールからモデルを利用しデータを追加する方法を理解すること
データの追加保存
Sequel Proでデータを追加しよう

モデルとそのモデルに対応するテーブルを作成したので、データを入れていきます。
本来であればアプリケーションを動かしてブラウザからデータを保存しますが、この段階では、直接テーブルにデータを入れてみましょう。

 Sequel Proでデータを追加しましょう
カラムに直接データを挿入します。以下のように挿入しましょう。

①「id」は自動で挿入されるため入力は不要です。
②「content」カラムの下に続く枠をダブルクリックすると、テキストが入力できるようになります。どのような文章でも構いませんので、文章を入力してOKをクリックしてください。データを追加できます。
③「created_at」と「updated_at」には2020-01-01のような形で日時データを入力してください。

https://tech-master.s3.amazonaws.com/uploads/curriculums//a58fa7a48f1fd7a7cd44530cb2a2ad5f.gif

コンソールでデータを追加しよう

Sequel Proでデータを追加しました。もうひとつ、データを追加する方法を学びましょう。

現在のFirstAppは、まだブラウザでデータを保存する仕組みを持っていないため、ターミナルからアプリを動かすコンソールを使用する方法を学びます。

 コンソール
コンソールとは、ターミナルからアプリケーションの操作をする仕組みです。
irbもコンソールのひとつと言えます。

 rails cレイルズ シーコマンド
コンソールを起動するコマンドです。
Railsアプリのディレクトリでrails cを使用することで、そのRailsアプリをコンソールから操作できます。

【例】
1
2
# コンソールを起動
% rails c
irbが起動し、Rubyのコードが実行できるようになります。
irbコマンドと異なる点は、このコンソールで、Railsアプリの変数やクラスを使用できることです。

【例】コンソール
1
irb(main):001:0>
値の確認や、メソッドを試してみることができます。

cは英語で「コンソール」を意味するconsoleの略です。こちらのコマンドはWebで検索すればすぐにわかるものなので、覚える必要はありません。

保存に使用するメソッドを1つ、コンソールで試してみましょう。

 saveセーブメソッド
モデルが使用できるインスタンスメソッドです。
使用すると、そのモデルが対応するテーブルにレコードを保存します。

【例】
1
モデルのインスタンス.save
実際に使用する場合は、インスタンスにデータを追加したあとsaveメソッドを使用します。

モデルのインスタンスにデータを追加する方法についての説明は、後の章で行います。

【例】saveメソッドの使用
1
2
3
4
5
6
7
8
# モデルのインスタンスを生成
model = Model.new

# インスタンスにデータを追加
model.text = "追加するデータ"

# テーブルにレコードを保存
model.save
それでは、saveメソッドを試して、データを追加しましょう。

 コンソールでデータを追加しましょう
コンソールを起動して、saveメソッドでデータを追加します。
まずは、以下のコマンドを実行しましょう。

ターミナル
1
2
# コンソールを起動
% rails c
コンソールが起動したら、newメソッドでモデルのインスタンスを生成し、データを追加したらsaveメソッドで保存しましょう。

以下のコードを1行ずつ実行しましょう。

コンソール
1
2
3
4
irb(main):001:0> post = Post.new
irb(main):002:0> post.content = "こんにちは！"
irb(main):003:0> post.save
irb(main):007:0> exit
コンソールから、投稿1つ分のデータを保存しました。
https://tech-master.s3.amazonaws.com/uploads/curriculums//b8958cd3d38466f446202d33b7a043a6.png

このように合計2つのレコードが用意できていればOKです。

これで、データを追加保存する2つの方法を学びました。
次の章では、この保存されたデータを取得して扱う方法を学びます。

作業チェック
 Sequel Proでデータを追加することができた
 コンソールからコードを入力して、データを追加することができた
練習問題
本章で学んだことを問題を解きながら復習しましょう。問題を解く際は、カリキュラムを見てはいけません。思い出すという行動をすることで、より一層の知識定着が可能となります。

不明点は次のカリキュラムに進む前に復習し、満点をとれるまで解き直しましょう。それまで次のカリキュラムに進まないようにしてください。以降のカリキュラムは、これまで学んだ内容が身についている前提で進むからです。

【練習問題 Ruby on Rails】データを保存しよう

この章の振り返り
要点チェック
 コンソールとは、ターミナルからアプリケーションの操作をする仕組みのこと。
 rails cコマンドとは、コンソールを起動するコマンドのこと。
 saveメソッドとは、モデルが使用できるインスタンスメソッドであり、テーブルにレコードを保存する役割がある。



問題.1
コンソールの起動
コンソールを起動するためのコマンドを答えてください。

回答
1
解答を貼り付けてください。
1
2
3
rails c

# コードブロックは上のように```の直後に言語名を指定してください。
模範解答
模範解答
1
rails c
rails cでコンソールを起動できます。必ずコンソールを起動したいアプリケーションのディレクトリで実行するようにしましょう。

＊正しく解答できて5点。1箇所でも誤っていれば0点。

この回答の点数を入力してください。
0
点配点5点
問題.2
コンソールでのデータの保存
Articleモデル（articlesテーブル）にコンソールを用いてデータを保存します。この時、articlesテーブルのtitleカラムには"こんにちは"と文字を入れることにします。以下の空欄に入る語句を答えてください。

1
2
3
4
irb(main):001:0> article = Article.【  A  】
irb(main):002:0> article.【  B  】 = "こんにちは！"
irb(main):003:0> article.save
irb(main):004:0> exit
回答
1
解答を貼り付けてください。
1
2
3
new
title
# コードブロックは上のように```の直後に言語名を指定してください。
模範解答
模範解答
1
2
A：new
B：title
データを保存するときは、「インスタンスを生成する→インスタンスの中身を上書きする→インスタンスを保存する」の流れで作業が進むことを覚えておきましょう。
