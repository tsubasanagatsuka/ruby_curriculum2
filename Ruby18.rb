
概要
目的
テーブルからのデータ取得
データ取得の仕組みを知ろう
データ取得をコンソールで試そう
テーブルから取得したデータの表示
コントローラーで単一レコードを取得しよう
ビューで単一レコードのカラムデータを表示しよう
コントローラーで複数レコードを取得しよう
ビューで複数レコードのカラムデータを表示しよう
ビューの整形
見た目を整えよう
データ取得と表示の振り返り動画
動画でデータの表示を理解しよう
動画でMVCの流れを確認しよう
練習問題
この章の振り返り
進捗度7 / 7
100%
このカリキュラムへのご要望
Ruby on Rails（FirstApp）
〜保存したデータを取得して表示しよう〜
Capillas de marmolJavier Vieras - Marble cathedral inside
はじめに
概要
この章では、データを取得する方法と、ビューにデータを表示する方法を学びます。

目的
モデルを利用しデータを取得する方法を理解すること
モデルが持つActiveRecordメソッドの役割と使用方法を理解すること
取得したデータをビューで表示する方法を理解すること
取得した複数データを繰り返し処理によって1つずつ扱う方法を理解すること
テーブルからのデータ取得
データ取得の仕組みを知ろう
モデルを利用して、テーブルからデータを取得するために必要となる、ActiveRecordメソッドについて理解しましょう。

 ActiveRecordアクティブレコードメソッド
モデルがテーブル操作に関して使用できるメソッドの総称です。
テーブルに情報を保存したり取得するために使用します。インスタンスの情報をレコードとしてテーブルに保存するsaveメソッドも、ActiveRecordメソッドのひとつでした。

数多くあるActiveRecordメソッドの一例を紹介します。
それぞれ、使用するタイミングで詳しく説明します。

メソッド	用途
all	テーブルのすべてのデータを取得する
find	引数にレコードのidを指定し、対応するレコードを取得する
new	クラスのインスタンス（レコード）を生成する
save	クラスのインスタンス（レコード）を保存する
たとえば以下のように記載します。

【例】
1
2
3
4
5
Post.all
# => Postモデル（postsテーブル）の全てのデータを取得する

Post.find(2)
# => Postモデル（postsテーブル）の2番目のデータを取得する
次のステップからは、これらを実際に操作して試します。

データ取得をコンソールで試そう
ActiveRecordメソッドを用いることで、テーブルのデータを取得できることがわかりました。早速FirstAppに記述していきたいところですが、まずはコンソールでActiveRecordメソッドを用いてデータ取得の練習をしてみましょう。

 データが保存されているか確認しましょう
Sequel Proで、下記画像のようにデータが2つ保存されているか確認をしましょう。

https://tech-master.s3.amazonaws.com/uploads/curriculums//0ee978938b8e7777f97fb2cd016b34d7.jpeg

保存されていない場合は、前のカリキュラムにならってデータを追加しましょう。

 コンソールを起動しましょう
まずはコンソールを起動します。

ターミナル
1
2
3
4
5
# first_appのディレクトリにいることを確認
% pwd

# コンソールの起動
% rails c
 全レコードを取得してみましょう
続いて、Postモデルからすべてのデータを取得してみましょう。irb(main):001:0>の後にPost.allとコードを記述し実行します。

コンソール
1
2
3
4
5
irb(main):001:0> Post.all
   (3.4ms)  SET NAMES utf8,  @@SESSION.sql_mode = CONCAT(CONCAT(@@sql_mode, ',STRICT_ALL_TABLES'), ',NO_AUTO_VALUE_ON_ZERO'),  @@SESSION.sql_auto_is_null = 0, @@SESSION.wait_timeout = 2147483
  Post Load (6.3ms)  SELECT  `posts`.* FROM `posts` LIMIT 11
=> #<ActiveRecord::Relation [#<Post id: 1, content: "はじめまして", created_at: "2019-01-01 00:00:00", updated_at: "2019-01-02 00:00:00">, #<Post id: 2, content: "こんにちは！", created_at: "2019-02-01 00:00:00", updated_at: "2019-02-02 00:00:00">]>
irb(main):002:0>
 irb(main):xxx:0>という部分は自動で表示される入力待ちの状態を意味するものなので、実際に入力するのはirb(main):xxx:0>以降の部分です
少しわかりづらいですが、戻り値には、Sequel Proとコンソールで追加した2つのデータが表示の後半部分に書かれています。現在テーブルに保存されているすべてのレコードが取得できました。

 単一レコードを取得してみましょう
次に、1番目のデータを取得してみましょう。irb(main):002:0>の後にPost.find(1)とコードを記述し実行します。

コンソール
1
2
3
4
irb(main):002:0> Post.find(1)
  Post Load (2.6ms)  SELECT  `posts`.* FROM `posts` WHERE `posts`.`id` = 1 LIMIT 1
=> #<Post id: 1, content: "はじめまして", created_at: "2019-01-01 00:00:00", updated_at: "2019-01-02 00:00:00">
irb(main):003:0>
このようにidを指定して、1つのレコードだけが取得できました。

 レコードを変数に代入しましょう
これらは変数に代入することが可能です。変数postに1番目のレコードを代入しましょう。
irb(main):003:0> の後にpost = Post.find(1)とコードを記述し実行します。

コンソール
1
2
3
4
irb(main):003:0> post = Post.find(1)
  Post Load (0.3ms)  SELECT  `posts`.* FROM `posts` WHERE `posts`.`id` = 1 LIMIT 1
=> #<Post id: 1, content: "はじめまして", created_at: "2019-01-01 00:00:00", updated_at: "2019-01-02 00:00:00">
irb(main):004:0>
 変数でレコードを表示してみましょう
irb(main):004:0>の後にそのままpostと変数を記述して実行すると、さきほど代入した1番目のデータが表示されます。

コンソール
1
2
3
irb(main):004:0> post
=> #<Post id: 1, content: "はじめまして", created_at: "2019-01-01 00:00:00", updated_at: "2019-01-02 00:00:00">
irb(main):005:0>
変数postにデータが代入できていることが確認できました。

 カラムデータを表示してみましょう
次に、contentのみを表示してみます。irb(main):005:0> の後にpost.contentとコマンドを記述して実行しましょう。

コンソール
1
2
3
irb(main):005:0> post.content
=> "はじめまして"
irb(main):006:0>
このようにcontentカラムのデータだけを表示することができました。

次に、irb(main):006:0>の後にcreated_atカラムも表示してみましょう。

コンソール
1
2
3
irb(main):006:0> post.created_at
=> Tue, 01 Jan 2019 00:00:00 UTC +00:00
irb(main):007:0>
このように.カラム名を続けて記載することで、カラムのデータだけを取得できます。

https://tech-master.s3.amazonaws.com/uploads/curriculums//83413aaec934b412a047ce94eb935df3.png

 コンソールを終了させましょう
exitと入力して、コンソールを終了させましょう。

コンソール
1
irb(main):007:0> exit
次のステップからは、いよいよアプリケーションの実装を進めていきます。
モデルによるデータの取得を利用して、ビューに表示します。

作業チェック
 コンソールで、全レコードを取得することができた
 コンソールで、単一レコードを取得することができた
 レコードを変数に代入することができた
 カラムデータを表示することができた
テーブルから取得したデータの表示
コントローラーで単一レコードを取得しよう
まずは、単一レコードのみをブラウザで表示できるようにしましょう。

ビューを学んだ章で、コントローラーに記述したインスタンス変数は、ビューファイルに渡すことができることを学びました。

https://tech-master.s3.amazonaws.com/uploads/curriculums//c8e49ed4b01b1a0846d590c4be717e7c.png

この仕組みを利用してデータを表示させるところまでを実装します。

 findファインドメソッド
モデルが使用できるActiveRecordメソッドのひとつです。
メソッドの引数に、レコードのidを記述することで、そのidに対応するレコードを取得します。

findメソッドは、モデルのクラスに対して使用します。

【例】
1
モデル名.find(レコードのid)
それでは、コントローラーでモデルとfindメソッドを利用しましょう。

 コントローラーでデータを取得しましょう
コントローラーでモデルを利用します。
postsコントローラーを以下のように編集しましょう。

app/controllers/posts_controller.rb
1
2
3
4
5
class PostsController < ApplicationController
  def index
    @post = Post.find(1)  # 1番目のレコードを@postに代入
  end
end
インスタンス変数@postに1番目のレコードのデータを代入しました。

ビューで単一レコードのカラムデータを表示しよう
コントローラーでインスタンス変数@postにデータを代入できたので、ビューで表示させましょう。

現在のビューファイルでは、以下のように@postが記述されています。

【例】app/views/posts/index.html.erb
1
2
<h1>トップページ</h1>
<%= @post %>
 現時点のアプリをブラウザで確認しましょう
以下にアクセスして確認しましょう。サーバーを起動していない場合は、先にrails sをしておきましょう。

http://localhost:3000/posts
以下のような、よくわからない表示がされています。

https://tech-master.s3.amazonaws.com/uploads/curriculums//6f1fc720973ed83e3e5124a497493527.png

これは、@postには1番目のレコードが丸ごと入っており、それをそのまま表示しようとしたためです。
取得し表示したい情報は、レコードのどのカラムなのかを指定しておく必要があります。

特定のカラムの情報だけを表示してあげるように編集しましょう。

 特定のカラムのみを表示しましょう
以下のようにビューファイルを編集しましょう。contentカラムを表示するようにします。

app/views/posts/index.html.erb
1
2
<h1>トップページ</h1>
<%= @post.content %>
それでは再度ブラウザで確認しましょう。すると、以下のようにcontentカラムのデータだけを無事表示することができました。

https://tech-master.s3.amazonaws.com/uploads/curriculums//1461b8d15745726cacca9a331876fb02.png

 別のカラムも表示しましょう
以下のようにビューファイルを編集しましょう。

app/views/posts/index.html.erb
1
2
3
<h1>トップページ</h1>
<%= @post.content %>
<%= @post.created_at %>
ブラウザで確認すると、日時データも表示することができました。
このように、存在するカラム名であれば、単一レコード情報.カラム名とすることでそのカラムの情報を表示できます。

https://tech-master.s3.amazonaws.com/uploads/curriculums//aee26f34160d09e073f1faec64de0591.png

コントローラーで複数レコードを取得しよう
前のステップでは1つのレコードを表示することができました。次に、すべてのレコードを表示できるように実装します。

 allオールメソッド
モデルが使用できるActiveRecordメソッドのひとつです。
allメソッドを使用することで、モデルに対応するテーブルのレコードをすべて取得します。

allメソッドは、モデルのクラスに対して使用します。

【例】
1
モデル名.all
それでは、コントローラーでモデルとallメソッドを利用しましょう。

 コントローラーでデータを取得しましょう
モデルを利用して、テーブルのレコードすべてを取得します。
複数データになるので、変数名も@postから@postsに変更しましょう。変数名は任意で自由に付けられますが、どのようなデータが入っているのかわかりやすい名前にする必要があります。

app/controllers/posts_controller.rb
1
2
3
4
5
class PostsController < ApplicationController
  def index
    @posts = Post.all  # すべてのレコードを@postsに代入
  end
end
これですべてのレコードが取得され、@postsに代入できました。

ビューで複数レコードのカラムデータを表示しよう
それでは、変数名を@postから@postsに変更した点を踏まえ、ビューファイルを編集していきましょう。

 ビューファイルを編集しましょう
以下のようにビューファイルを編集しましょう。

app/views/posts/index.html.erb
1
2
3
<h1>トップページ</h1>
<%= @posts.content %>
<%= @posts.created_at %>
変数名を@postから@postsに変更しました。

 ブラウザでアプリを確認しましょう
それでは、ビューも編集できたので、ブラウザでアプリを確認してみましょう。

http://localhost:3000/posts
すると、以下のようにエラーが出てしまいました。

https://tech-master.s3.amazonaws.com/uploads/curriculums//59bdbb6470996b13be3e9504e38d83a6.png

これは下図のように、複数のデータを一度に表示しようとしたために生じたエラーです。

https://tech-master.s3.amazonaws.com/uploads/curriculums//ece6dc1eb462dbb9c9950a81077c02d9.png

どのレコードのcontentカラムを表示すれば良いかわからずに、エラーが生じてしまいました。

今回のエラーは、ビューファイルでデータを取り出す際に工夫することで対処できます。
複数のデータを一度に表示しようとしたためにエラーが生じたのであれば、1つずつ順番に表示するように工夫すれば良いのです。

順番に処理を行うには、eachメソッドが有効です。
Rubyを学習したレッスンですでにeachメソッドは登場していますが、ここで一度おさらいをしておきます。

【例】
1
2
3
4
5
users = ["鈴木さん", "佐藤さん", "高橋さん"]

users.each do |user|
  puts user
end
このようなプログラムを作成すると、以下のように出力がされました。

【例】
1
2
3
"鈴木さん"
"佐藤さん"
"高橋さん"
このように、eachメソッドは配列の要素1つずつに繰り返し処理をしてくれるものでした。
この処理を利用して、ビューを編集します。

 eachメソッドでレコードを1つずつ扱いましょう
以下のようにビューファイルを編集しましょう。

app/views/posts/index.html.erb
1
2
3
4
5
<h1>トップページ</h1>
<% @posts.each do |post| %>
  <%= post.content %>
  <%= post.created_at %>
<% end %>
ERBの記法を使って、eachメソッドを記述しました。

ERBにRubyを埋め込むタグが2種類あることはすでに学びました。
<%= %>は表示するものに使い、<% %>は表示しないものに使うのでした。

2行目のeachメソッドの処理自体は表示する必要がないので、=が付いていない方のタグを使用しました。post.contentやpost.created_atは表示する必要があるので、=が付いている方のタグを使用しました。

 ブラウザでアプリを確認しましょう
それでは、ブラウザで確認してみましょう。

http://localhost:3000/posts
以下のように、すべてのデータが表示されれば成功です。

https://tech-master.s3.amazonaws.com/uploads/curriculums//1fb3fda7a2ab625484fbb814ab130cdb.png

ビューの整形
見た目を整えよう
無事、ブラウザ上にすべてのデータを表示することができました。
しかし、現在のFirstAppはすべて横並びになっていて、見づらいレイアウトになっています。ビューを整えていきましょう。

以降はHTML・CSSの記述のみになるため、コピー&ペーストしていただいて構いません。
 ビューファイルを編集しましょう
index.html.erbを以下のように書き換えましょう

app/views/posts/index.html.erb
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
<h1>トップページ</h1>
<% @posts.each do |post| %>
  <div class="post">
    <div class="post-date">
      投稿日時：<%= post.created_at %>
    </div>
    <div class="post-content">
      <%= post.content %>
    </div>
  </div>
<% end %>
 CSSファイルを作成しましょう
app/assets/stylesheetsディレクトリに、posts.cssというCSSファイルを作成しましょう。

 app
 assets
 stylesheets
 posts.css
このディレクトリにCSSを用意することで、アプリケーションの見た目を変更できます。

どのような仕組みでCSSを参照しているのかは、応用カリキュラムで説明しますので、ここでは作業を進めていきましょう。

 CSSファイルを編集しましょう
posts.cssを以下のように記述しましょう。

app/assets/stylesheets/posts.css
1
2
3
4
5
6
7
8
9
.post{
  border: 1px solid;
  width: 40%;
  margin-top: 30px;
}

.post-date{
  color: gray;
}
 ブラウザで確認しましょう
それでは、ブラウザで確認してみましょう。

http://localhost:3000/posts
以下のように、見やすくレイアウトが変更されていれば成功です。

https://tech-master.s3.amazonaws.com/uploads/curriculums//36ec661055f97ad7c2a5343bfa275127.png

データ取得と表示の振り返り動画
動画でデータの表示を理解しよう
データの取得および表示においても、いくつかの新しい概念が登場しました。一度動画で振り返っておきましょう。


さて、このカリキュラムではデータベースに保存されている情報を表示することができました。しかしながら、まだデータベースに直接情報を書き込んでいる状態です。
次の章からは、アプリケーションを動かしてブラウザからデータベースに情報を追加できるように実装を進めます。

動画でMVCの流れを確認しよう
本カリキュラムで、データベースに保存されている情報を表示するという一覧機能を実装することができました。
以下の動画を視聴し、どのような流れで処理が行われているか確認しましょう。


練習問題
本章で学んだことを問題を解きながら復習しましょう。問題を解く際は、カリキュラムを見てはいけません。思い出すという行動をすることで、より一層の知識定着が可能となります。

不明点は次のカリキュラムに進む前に復習し、満点をとれるまで解き直しましょう。それまで次のカリキュラムに進まないようにしてください。以降のカリキュラムは、これまで学んだ内容が身についている前提で進むからです。

【練習問題 Ruby on Rails】保存したデータを取得して表示しよう

この章の振り返り
要点チェック
 ActiveRecordメソッドとは、モデルがテーブル操作に関して使用できるメソッドの総称。
 findメソッドとは、モデルが使用できるActiveRecordメソッドのひとつで、該当するidのレコードを取得する役割。
 allメソッドとは、モデルが使用できるActiveRecordメソッドのひとつで、テーブルのレコードをすべて取得する役割。
このカリキュラムの理解度を教えてください
ボタンを押していただくと次へ進めます


問題.1
ActiveRecordメソッド
以下はよく使うActiveRecordメソッドを列挙したものです。それぞれに当てはまるメソッドを答えてください。



回答
1
解答を貼り付けてください。
1
2
3
4
5
all
find
new
save
# コードブロックは上のように```の直後に言語名を指定してください。
模範解答
模範解答
1
2
3
4
1：all
2：find
3：new
4：save
これらはよく使うメソッドなので、使用用途をしっかり覚えておきましょう。

＊各1点。合計4点。

この回答の点数を入力してください。
0
点配点4点
問題.2
データの取得と表示1
コントローラーで取得したレコードをブラウザ上で表示するために、以下のように記述しました。しかしながら、このままでは正しく表示されません。
その理由を答えてください。ただし、テーブル内には取得したいデータは正しく保存され、取得するモデル名やカラム名も正しいとします。

posts_controller.rb

1
2
3
4
5
class PostsController < ApplicationController
  def index
    @post = Post.find(1)
  end
end
app/views/articles/index.html.erb

1
2
<h1>トップページ</h1>
<%= @post.content %>
回答
1
解答を貼り付けてください。
1
2
3
@post = Post.all

# コードブロックは上のように```の直後に言語名を指定してください。
模範解答
模範解答
1
ビューファイルが存在するディレクトリが正しくないため。
ビューファイルは、app/views/コントローラー名/アクション名.html.erbという規則で作成します。
したがって、app/views/posts/index.html.erbと作成すれば正しく表示されます。

＊正しく解答できて3点。文章の意図が異なっていたら0点。

この回答の点数を入力してください。
0
点配点3点
問題.3
データの取得と表示2
コントローラーで取得したレコードをブラウザ上で表示するために、以下のように記述しました。しかしながら、このままではエラーとなってしまいます。
その理由を答えてください。ただし、テーブル内には取得したいデータは正しく保存され、取得するモデル名やカラム名も正しいとします。

articles_controller.rb

1
2
3
4
5
class ArticlesController < ApplicationController
  def index
    @articles = Article.find(1)
  end
end
app/views/articles/index.html.erb

1
2
3
<% @articles.each do |article| %>
  <%= article.content %>
<% end %>
回答
1
解答を貼り付けてください。
1
# コードブロックは上のように```の直後に言語名を指定してください。
模範解答
模範解答
1
findで取得した単一のレコードに対して、eachを適用しているため。
eachを適用するのは複数データを取得した時のみです。

