pencil_case = ["ペン", "消しゴム", "定規"]

puts pencil_case

pencil_case = ["ペン", "消しゴム", "定規"]
pencil_case << "えんぴつ"

puts pencil_case

pencil_case = ["ペン", "消しゴム", "定規"]
pencil_case << "えんぴつ"

puts pencil_case
puts pencil_case[1]

pencil_case = ["ペン", "消しゴム", "定規"]
puts pencil_case.length

pencil_case << "えんぴつ"
pencil_case << "付箋"
puts pencil_case.length

概要
この章では、文字列や数値とは別の値である配列を学びます。
複数の値を順番でまとめて管理する方法を学びましょう。

また、今回から複数の章に渡り、学習内容を少しずつ反映して開発する2つ目のミニアプリを作ります。


目的
配列の生成方法を理解すること
配列における添字を理解すること
配列における要素追加方法を理解すること
配列における要素取得方法を理解すること
配列の使用メリットを理解すること
事前準備
サンプルコード用のRubyファイルを作成しよう
学習に使用するRubyファイルを作成します。

新規Rubyファイルを作成しましょう
以下のように、rubyディレクトリに「array.rb」というファイルを作成してください。

 ホームディレクトリ
 ruby
 array.rb
配列
複数の値を順番で管理しよう
変数を使って、値に名前をつけて管理することはできるようになりました。
しかし、もし生徒の名簿や顧客リストのように、複数の名前などを管理したい場合は、数値や文字列、変数だけでは管理が難しくなってしまいます。

たとえば「name1, name2, ...」と変数を大量に用意して管理すると、使われない変数が生まれたり、順番が変わったときには他の変数名も変更する必要が出たり、大変な作業になります。

https://tech-master.s3.amazonaws.com/uploads/curriculums//b2c6ece6c50f2bbc12448c370d253db0.png

「名前」や「住所」など、同じ意味を持つ情報が複数あれば、それらを1つにまとめて管理したいところです。
複数の情報を順番にまとめて管理するときに利用するものが、配列です。

配列
配列は、1つの変数で複数の値を持つことのできる値です。配列の中には複数の値を入れることができます。配列は順番で値を管理します。

配列は引き出しのようなロッカーをイメージしてください。この箱の中にはいろんな情報を何個でも入れることができます。

https://tech-master.s3.amazonaws.com/uploads/curriculums//5861866b20e45762aee9136a8bd4f845.png

もしロッカーで物を整理する際は、順番にものを入れると管理しやすくなりますね。
配列はデータを入れるとそのデータに順番がつけられます。
すなわちデータと順番が紐付けられます。

要素
配列の中のデータは「要素」と呼ばれます。要素は順番を持っていて、配列へ入れた順に1番目,2番目,... と自動的に順番が割り振られます。

https://tech-master.s3.amazonaws.com/uploads/curriculums//1131e90ab452a57bcd24a314bc99b48b.png

配列を生成してみよう
配列を作ってみましょう。配列は角括弧[]で囲い生成します。

【例】配列の宣言
1
変数 = []
この記述で、何も入っていない空の配列が作られて、変数に代入されています。

もちろん、最初から要素を入れた状態で作ることもできます。文字列「ペン、消しゴム、定規」の入った配列「pencil_case」をつくってみましょう。

array.rbを編集しましょう
配列を作って、出力してみましょう。

ruby/array.rb
1
2
3
pencil_case = ["ペン", "消しゴム", "定規"]

puts pencil_case
ここでは最初に書いた要素の方から左から順番に入ります。つまり、ペンが1番目、消しゴムが2番目、定規が3番目です。ターミナルから実行して確認しましょう。

https://tech-master.s3.amazonaws.com/uploads/curriculums//5ab965ad003cafdba77650c86895011b.png

配列に値を追加しよう
配列は、定義した後から要素を追加することができます。
配列への要素の追加には<<という演算子を使用します。

配列演算子(<<)
配列に対してさまざまな処理を行う演算子を配列演算子と呼びます。

生成した配列に新しい要素を追加したいときがあります。
そのときは以下のように配列に続けて<<を記述し、追加したい要素を後ろに書くことで追加できます。

【例】配列へ要素を追加
1
配列 << 追加する要素
array.rbを編集しましょう
配列「pencil_case」に文字列「えんぴつ」を追加してみましょう。

ruby/array.rb
1
2
3
4
pencil_case = ["ペン", "消しゴム", "定規"]
pencil_case << "えんぴつ"

puts pencil_case
実行すると、出力には「えんぴつ」も含まれていることがわかります。
https://tech-master.s3.amazonaws.com/uploads/curriculums//d0093db48dacdf04d3faf30584a39606.png

配列の値を取得しよう
配列が持つ要素は、取得することができます。
要素を取得するには、添字について理解する必要があります。

添字そえじ
添字は、配列の各要素に割り振られた番号のことです。

すでに説明があった通り、配列は、要素を順番で管理するものです。
添字は、各要素に対して自動的に、順番に割り当てられています。

1点だけ注意するべきことは、添字は「0」から始まることです。

https://tech-master.s3.amazonaws.com/uploads/curriculums//bb16a450e7bdfdc170cbb6e1329dc334.png

「0」から添字が始まるため、添字0に対応する要素は、1番目に入っている要素です。
入っている順番と対応する添字は1つずれることを覚えておきましょう。

取得したい要素に対応する添字を指定することで、要素を取得することができます。
配列の取得は、配列に続けて、角括弧[]で取得したい要素の添字を囲います。

【例】配列の要素を取得
1
配列[添字]
要素の取得は、配列から要素を取り出しているのではなく、
値をもらっているだけなので、配列が持つ要素はそのままの状態です。

取得した要素は、別の変数に代入することができます。

【例】配列の要素を取得し変数に代入
1
変数 = 配列[添字]
array.rbを編集しましょう
要素を取得して、出力してみましょう。

ruby/array.rb
1
2
3
4
5
pencil_case = ["ペン", "消しゴム", "定規"]
pencil_case << "えんぴつ"

puts pencil_case
puts pencil_case[1]
出力はどうなりましたか？最後に「消しゴム」が出力されたはずです。1番目に入っているのは「ペン」ですが、添字は0から始まるため、pencil_case[1]は2番目の要素を取得します。

https://tech-master.s3.amazonaws.com/uploads/curriculums//568ea01d9a62000335f889fc22977e49.png

添字0に「ペン」、添字1に「消しゴム」が対応して入っていたため、
pencil_case[1]では「消しゴム」になったということがわかります。

配列の値を変更しよう
配列に追加されている要素を変更することができます。
まずは、要素の取得方法と同様に、角括弧[]で変更したい要素の添字を囲います。
その後、代入演算子で変数に値を代入するように記述します。

【例】配列の要素を変更
1
配列[添字] = 値
これで、指定した添字の要素が、記述した値に変更されます。

実際に要素を変更してみましょう。

array.rbを編集しましょう
「消しゴム」を「修正ペン」に変更してみましょう。

ruby/array.rb
1
2
3
4
5
6
pencil_case = ["ペン", "消しゴム", "定規"]
pencil_case << "えんぴつ"
pencil_case[1] = "修正ペン"

puts pencil_case
puts pencil_case[1]
実行すると、最後に「修正ペン」が出力され、要素が変更されていることがわかります。

https://tech-master.s3.amazonaws.com/uploads/curriculums//fd55267c84ec9eea298cfde5e2f4a841.png

配列が持つ要素の数を数えよう
最後に、配列の要素の数を調べる方法を学びましょう。
これまでの文字列や数値と同じく、配列もメソッドを持っています。メソッドを利用して要素の数を調べます。

lengthレングスメソッド
配列が持つメソッドです。lengthメソッドは配列の要素数を返します。

【例】irb
1
2
3
# 配列内の要素の数を返す
irb(main):001:0> ['あお', 'きいろ', 'あか'].length
=> 3
文字列もlengthという同じ名前のメソッドを持っていましたが、値の種類が異なるので、これらはまったく別のメソッドです。混同しないように注意しましょう。

試しに配列「pencil_case」の中にいくつ要素があるのか調べてみましょう。

array.rbを編集しましょう
array.rbに配列への要素追加とlengthによる出力の記述

ruby/array.rb
1
2
3
4
5
6
pencil_case = ["ペン", "消しゴム", "定規"]
puts pencil_case.length

pencil_case << "えんぴつ"
pencil_case << "付箋"
puts pencil_case.length
最初は「ペン、消しゴム、定規」という3つの要素が入っているので、3がlengthメソッドで返ってきます。その後「えんぴつ、付箋」を追加したので5が返ってきます。実行して確認しましょう。

https://tech-master.s3.amazonaws.com/uploads/curriculums//d64735ca5da80ef1ef71b93884c95b6d.png

このように、lengthを使えば配列の要素の個数が分かります。