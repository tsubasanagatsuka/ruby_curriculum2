概要
この章では、配列とは別の方法で複数の値を管理するハッシュを学びます。
複数の値を名前付きでまとめて管理する方法を学びましょう。

目的
キーバリューストアを理解すること
ハッシュの生成方法を理解すること
シンボルの使用方法を理解すること
ハッシュにおける要素追加方法を理解すること
ハッシュにおける要素取得方法を理解すること
ハッシュの使用するメリットを理解すること
配列とハッシュの違いを理解すること
事前準備
サンプルコード用のRubyファイルを作成しよう
学習に使用するRubyファイルを作成します。

新規Rubyファイルを作成しましょう
以下のように、rubyディレクトリに「hash.rb」というファイルを作成してください。

 ホームディレクトリ
 ruby
 hash.rb
ハッシュ
配列による管理の限界を理解しよう
配列で、同じ意味を持つ複数の情報を1つにまとめることができました。
現在のroller_coaster.rbを見ると、「名前」と「身長」をすべて配列friendsに追加しています。

【例】ruby/roller_coaster.rb
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
puts "お友達の名前は？"
friends << "タロウ"
puts "お友達の身長は？"
friends << 160

puts "お友達の名前は？"
friends << "ジョン"
puts "お友達の身長は？"
friends << 120

puts "お友達の名前は？"
friends << "シェリー"
puts "お友達の身長は？"
friends << 110
しかし、この状態だと配列の中身をみたときに、「この身長はだれの身長？」というように、要素同士の関係がわからなくなってしまいます。
また、「名前」と「身長」というそれぞれ別の意味の値を1つにまとめていることも好ましくありません。取得するときには何番目に何が入っているか毎回確認する必要だったり、人数を知りたいときにlengthメソッドを実行しても、「身長」の要素数もカウントされてしまいます。

もし変数で管理しようとしても、「name1, height1, name2, height2, ...」のような管理になり、また変数が増えてしまいます。

https://tech-master.s3.amazonaws.com/uploads/curriculums//b2f71ec3d7f2bc5cc2593d7e7c397136.png

このように、配列は複数の情報を順番で管理することは得意でも、
複数の情報同士の関係性を示すことには向いていません。

関係のある複数の値を管理するときには、ハッシュを用います。

ハッシュ
ハッシュは、「データ」とそれに対応する「名前」のセットを要素として持つ値です。
ハッシュにおいては、データをバリュー、それに対応する名前をキーと呼びます。

複数のデータを持つことのできる値という点は、配列と同じです。
ただし、ハッシュは順番ではなく、キーで管理します。このようなキーとバリューで管理する方式をキーバリューストアと呼びます。

キーバリューストア

ハッシュを用いれば、別々の意味を持つ値を1つにまとめられるため、値同士の関連を示すことができます。

ハッシュを生成してみよう
ハッシュの生成方法を学びましょう。
ハッシュは、波括弧{}を使って生成します。

【例】ハッシュの宣言
1
変数 = {}
配列と同様に、はじめから要素を持った上で生成できます。ハッシュの生成は以下のようにハッシュロケット=>を用いてキーとバリューをセットにして記述します。

【例】ハッシュの宣言
1
変数 = { キー1 => バリュー1, キー2 => バリュー2, キー3 => バリュー3 }
ハッシュのキーには、文字列も数値も使用できますが、
多くの場合、シンボルという値が使用されます。

シンボル
シンボルは、見た目は文字列のようですが、コンピューターが処理するときには数値として扱われる値のことです。ハッシュのキーとしてよく用いられます。

シンボルの宣言は、文字列の先頭にコロン:をつけます。
同じ文字列であれば、文字列にクォーテーションをつけるかどうかにかかわらず中身は同じ値になります。見やすくするため、ほとんどの場合クォーテーションはつけません。

【例】シンボルの宣言
1
2
3
# 以下はどちらもコンピューターが処理するときには同じ値として扱われる
:"文字列"
:文字列  # よく使用される
次に、「なぜシンボルがハッシュのキーとして用いられることが多いのか」について説明します。
先ほど説明したように、シンボルは見た目は文字列のようですが、コンピューターが処理するときには数値として扱われます。
文字列を扱うよりも、数値を扱うほうがコンピューターの処理速度は速くなります。シンボルは数値として扱われるため処理速度が速く、文字列としての役割も果たせることから、ハッシュのキーには、文字列よりもシンボルを用いることが多いです。

続いて、シンボルをハッシュのキーに用いる際の表記の仕方について説明します。
表記の仕方は以下の2種類があります。実際のコードを見てみましょう。

【例】シンボルをハッシュのキーに用いる際の表記の仕方
1
2
hash = { :name => "Taro" }
hash = { name: "Taro" }  # よく使用される
1行目は、文字列をキーに用いた場合と同じ書き方をしています。
2行目は、シンボルをキーに用いた場合のみ可能な書き方です。1行目の書き方と比べて、=>がない分記述量が少ないので、こちらの書き方を使用されることが多くあります。カリキュラムでもこの書き方を使用します。

世の中のコードは必ずしも統一されているわけではありません。文字列をキーに用いた場合の書き方を含めて、これらの3つの記法があることを覚えておきましょう。

まとめると以下の図のようになります。

シンボルオブジェクト

それでは、実際にハッシュを扱ってみましょう。

hash.rbを編集しましょう
ハッシュを生成してみましょう。

ruby/hash.rb
1
2
3
4
5
student = { "name" => "John", "age" => 10 }
teacher = { name: "Mike", age: 25 }

puts student
puts teacher
2つのハッシュ「student」「teacher」を作りました。
「student」は、キーに文字列を使っています。
「teacher」は、キーにシンボルを使っています。

ハッシュに値を追加しよう
ハッシュは、定義した後から要素を追加できます。
ハッシュへの要素の追加には、配列で添字を指定するように角括弧[]の中にキーを記述し、値（バリュー）を代入します。

【例】ハッシュへ要素を追加
1
ハッシュ[追加するキー] = 値
この記述で、キーとバリューがセットになり、要素として追加されます。

hash.rbを編集しましょう
ハッシュ「teacher」に、担当教科を示す値を追加しましょう。
今回のキーはsubjectにします。

ruby/hash.rb
1
2
3
4
5
6
7
student = { "name" => "John", "age" => 10 }
teacher = { name: "Mike", age: 25 }

teacher[:subject] = "English"

puts student
puts teacher
シンボルでキーを指定し、対応する値をEnglishにして追加しました。
出力を確認しても、要素が追加されていることがわかります。

ハッシュの値を取得しよう
ハッシュの持っている値を取得してみましょう。
取得の際に使うのがその値に対応するキーです。以下の書き方で取得ができます。

【例】ハッシュの要素を取得
1
ハッシュ[取得したい値のキー]
配列では添字を指定していましたが、ハッシュではキーを指定します。

hash.rbを編集しましょう
要素を取得して出力してみましょう。

ruby/hash.rb
1
2
3
4
5
6
7
8
student = { "name" => "John", "age" => 10 }
teacher = { name: "Mike", age: 25 }

teacher[:subject] = "English"

puts student
puts teacher
puts teacher[:name]
最後に「Mike」が出力されます。指定したキーに対応する値が取得できていることがわかります。

ハッシュの値を変更しよう
ハッシュに追加されている要素を変更できます。
要素を追加するときと同様に、取得の記述に代入演算子で値を代入するように記述します。

【例】ハッシュの要素を変更
1
ハッシュ[変更したい値のキー] = 値
もし指定するキーがハッシュに含まれていれば、そのキーに対応する値を変更します。
存在しないキーであれば、すでに学習した通り、そのキーと値が新しい要素として追加されます。

実際にハッシュの要素を変更してみましょう。

hash.rbを編集しましょう
hash.rbにハッシュの要素変更と出力の記述

ruby/hash.rb
1
2
3
4
5
6
7
8
9
student = { "name" => "John", "age" => 10 }
teacher = { name: "Mike", age: 25 }

teacher[:subject] = "English"
teacher[:name] = "Emma"

puts student
puts teacher
puts teacher[:name]
名前を持つキーnameの値が変更され、最後の出力は「Emma」に変更されていることが確認できます。

ハッシュによる管理の限界を理解しよう
ハッシュは、別々の意味を持つ複数の値同士をまとめ、関係性を示すのに便利な値でした。

しかし、「名前」「年齢」という同じ構造のまとまり自体が増えていくと、ハッシュを代入する変数を増やすことになり、hash1, hash2, ...のような変数名に番号がつく無駄の多い管理になってしまいます。

https://tech-master.s3.amazonaws.com/uploads/curriculums//f13866179b086950cb4818eaf77e4d1f.png

これでは、せっかくハッシュを利用して複数の変数をまとめても、
そのハッシュ自身を代入する変数が増えてしまい本末転倒です。

そこで、配列と組み合わせて値を管理する方法を学びます。

配列は、複数の値を順番で管理し1つにまとめ、
ハッシュは、別々の意味を持つ複数の値同士を1つにまとめられます。
この2つの特徴を生かして、配列の要素にハッシュを追加して管理します。

https://tech-master.s3.amazonaws.com/uploads/curriculums//071c033dca485ff30aa1d9031b8e66c7.png

これで、別々の意味を持つ複数の値のまとまり自体を、複数管理することができるようになります。

配列とハッシュを組み合わせるこの方法は、はじめは混乱することがあるため、動画でも学習しましょう。


ハッシュの特徴と、配列との組み合わせについて学びました。
以上で、ハッシュの学習は終了です。

ミニアプリ作成
本章で学んだ内容を使って、roller_coaster.rbの開発を進めましょう。

ハッシュで情報を管理して配列に追加しよう
現在のroller_coasterは、別々の意味を持つ名前と身長を配列で管理しています。
しかし、これでは何番目にどの情報が入っているか確認する必要があります。さらに、配列に情報を追加するときもどの情報から入れるか統一している必要も出てきてしまいます。

【例】現在のroller_coaster.rb
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
ride_count = 0
friends = []

puts "お友達の名前は？"
friends << gets.chomp
puts "お友達の身長は？"
friends << gets.to_i
ride_count += 1

puts "お友達の名前は？"
friends << gets.chomp
puts "お友達の身長は？"
friends << gets.to_i
ride_count += 1

puts "お友達の名前は？"
friends << gets.chomp
puts "お友達の身長は？"
friends << gets.to_i
ride_count += 1

puts "乗車するのは#{ride_count}人です"
ハッシュを用意して、別々の意味を持つ値をまとめましょう。

roller_coaster.rbを編集しましょう
ハッシュfriendを用意して、名前、身長の情報を追加します。
この1人分の情報を持つハッシュを配列に追加して、順番で管理します。

ruby/roller_coaster.rb
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
ride_count = 0
friends = []

friend = {}
puts "お友達の名前は？"
friend[:name] = gets.chomp
puts "お友達の身長は？"
friend[:height] = gets.to_i
friends << friend
ride_count += 1

friend = {}
puts "お友達の名前は？"
friend[:name] = gets.chomp
puts "お友達の身長は？"
friend[:height] = gets.to_i
friends << friend
ride_count += 1

friend = {}
puts "お友達の名前は？"
friend[:name] = gets.chomp
puts "お友達の身長は？"
friend[:height] = gets.to_i
friends << friend
ride_count += 1

puts "乗車するのは#{ride_count}人です"
ハッシュを用意して、それぞれキーに:nameと:height用いて名前と身長の情報を追加しました。
1人分の情報をハッシュfriendが持ったあと、それらを複数管理する配列friendsに追加しています。

また、4行目以降は3回とも同じ記述をしており、冗長な書き方になっています。このような書き方は好ましくないため、次章以降の実装で改善します。

ターミナルでroller_coaster.rbを実行しましょう
この段階の挙動を確認するために、ターミナルで実行しましょう。実行結果は前章と変わらないはずです。
https://tech-master.s3.amazonaws.com/uploads/curriculums//f070e226f86406cc4da87b9af9080c4e.png

