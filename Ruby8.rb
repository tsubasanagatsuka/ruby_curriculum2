# 10.times do |arra|
#   puts arra + 1
# end

colors = ["あか","青","黄色"] #配列の中に要素を入れる
element_count = colors.length #colorsの変数の中には配列[赤、青、黄色]が入っている。それを変数element_countに代入

element_count.times do |i| #element_countにはcolorsの配列、要素が入っている。そこにtimesをやると要素の数だけ繰り返す
                          # そしてブロック変数をiにする これでelement_countがブロック変数iに代入された
  puts "色: #{colors[i]}" #puts 色：シンボル 式展開#{colors[i]}
end

furits = {"りんご" => 150, "オレンジ" => 200, "バナナ" => 100 }
furits.each do |key, value|
  puts "#{key} : #{value}"
end

friends = [
  {name: "yamada", height: 100},
  {name: "yama", height: 1200},
  {name: "mada", height: 3100}
]

friends.each do |taro|
  puts "#{taro[:name]}"
end

ride_count = 0
friends = [] #からの配列をfriendsに代入

3.times do #3回繰り返す
  friend = {} #friendという変数にハッシュを代入
  puts "お友達の名前は？" #ターミナルにまず表示されるもの
  friend[:name] = gets.chomp #ここでユーザーから入力されたものが配列のnameに代入される
  puts "お友達の身長は？"
  friend[:height] = gets.to_i #ユーザから入力された文字列を数値に変換し配列に代入
  friends << friend #friendをfriendsに代入
  if friend[:height] >= 130 #入力された値が１３０より上ならtrue,下ならfals
    puts "#{friend[:name]}くんは乗車できます" #配列の中のキー:nameを入れる
    ride_count += 1
  else
    puts "#{friend[:name]}くんは乗車できません！"
  end
end

puts "乗車するのは#{ride_count}人です"



概要
この章では、条件によって同じ処理を繰り返す方法を学びます。
同じコードを何度も記述せずに1つにまとめる方法を学びましょう。

目的
繰り返し処理の実装方法と使用方法を理解すること
配列に対する繰り返し処理の実装方法を理解すること
事前準備
サンプルコード用のRubyファイルを作成しよう
学習に使用するRubyファイルを作成します。

 新規Rubyファイルを作成しましょう
以下のように、rubyディレクトリに「loop.rb」というファイルを作成してください。

 ホームディレクトリ
 ruby
 loop.rb
繰り返し処理
同じ処理を繰り返そう
まずは、動画で繰り返し処理とは何かを理解しましょう。


現在のroller_coaster.rbは、同じ内容が何度も繰り返し記述されています。

回数が少ないため、まだ書くことはできますが、たとえばこれを100回繰り返したい場合になると、100回分記述することになり大変です。さらに、記述内容を少し変えることになれば、100回分書き換えなければなりません。

同じ処理の記述は1度だけにして、それを繰り返し行うようにしたいところです。
Rubyには、こうした繰り返しを行う繰り返し処理という仕組みが用意されています。

 繰り返し処理
繰り返し処理とは、同じ内容を繰り返し行う処理です。ループ処理とも呼ばれます。
この仕組みで、処理の記述は1度だけで、繰り返すことができます。

繰り返し処理を行う方法はいくつかありますが、
その中でも「繰り返し処理を行うメソッド」を学習しましょう。

 timesタイムスメソッド
timesとは、指定した数値の回数だけ繰り返し処理を行えるメソッドのことです。
timesに続けて、do~endの間に繰り返したい処理を記述します。たとえば数値が3であれば3回、100であれば100回繰り返し処理を行います。

【例】timesメソッドの記述方法
1
2
3
数値.times do
  # 繰り返す処理
end
 ブロック
timesメソッドのように、Rubyでは特定のメソッドを呼び出す際に、処理のまとまりを引数として渡すことができます。
処理のまとまりはdo〜endという記述で囲み、doからendまでの全体をブロックと呼びます。

また、doの後に||で囲まれたブロック変数を定義することができます。
timesメソッドにおいては、ブロック変数を定義することで、繰り返しの回数をブロック内で使用することができます。
繰り返し処理が1回実行されるごとに、ブロック変数に0から1ずつ増加する数値が代入されます。
ブロック変数はブロックの中でのみ使用可能です。

【例】ブロック変数を使用した場合のtimesメソッドの記述方法
1
2
3
4
数値.times do |ブロック変数|
  # 繰り返す処理
  # 繰り返しの回数を使う場合、ブロック変数を使用する
end
まずは書いてみて、繰り返し処理とブロック変数の動きを確認しましょう。

繰り返し処理を書いてみよう
実際にtimesメソッドを用いて繰り返し処理を行いましょう。

 loop.rbを編集しましょう
10回ループするプログラムを記述してみましょう。
loop.rbを以下のように編集しましょう。

ruby/loop.rb
1
2
3
10.times do |i|
  puts i + 1
end
編集できたら、rubyディレクトリに移動して、ターミナルでファイルを実行しましょう。
以下のように表示されていればOKです。

ターミナル
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
% ruby loop.rb
1
2
3
4
5
6
7
8
9
10
0から始まるブロック変数に1ずつ足していくことで、繰り返した回数を出力しています。

繰り返し処理を強制終了しよう
繰り返し回数や処理内容が増えてくると、なかなかプログラムが終わらず、途中で終了したくなる場合があります。
プログラムが実行されている途中で、繰り返し処理を強制終了する方法」を学んでおきましょう。

プログラム実行中にcontrol + Cとキーボードから実行すると、実行中のプログラムを強制終了できます。

 loop.rbを編集しましょう
1億回ループするプログラムを実行して、実行中にcontrol + Cで強制終了してみましょう。
loop.rbを以下のように編集しましょう。

ruby/loop.rb
1
2
3
100000000.times do |i|
  puts i + 1
end
以下のように実行中のプログラムが終了すればOKです。

https://tech-master.s3.amazonaws.com/uploads/curriculums//7609a004c9d961fa7c23ad4b0b5f9aa2.gif

このように、プログラムは実行終了まで待たずに途中で強制終了できます。
以下の動画でtimesメソッドについておさらいしましょう。


配列に同じ処理を繰り返そう
配列が持つすべての要素1つずつに対して、繰り返し処理を実行する場合を考えます。
今回は、「あか」「あお」「きいろ」の3つの文字列が格納された配列colorsの要素を一つずつ取り出して表示するケースを例にします。最終的に、ターミナルに以下のように表示されることを目指します。

ターミナル
1
2
3
色: あか
色: あお
色: きいろ
timesメソッドを用いると、以下のようなコードになります。

【例】timesメソッドで配列へ繰り返し処理
1
2
3
4
5
6
colors = ["あか", "あお", "きいろ"]
element_count = colors.length  # 要素数を変数に代入

element_count.times do |i|
   puts "色: #{colors[i]}"  # 添字0から要素を出力
end
このようにtimesメソッドを用いると、配列の要素数をコードに明記する必要があります。
求めていた処理はできていますが、少し冗長で読みにくいコードになっています。

配列のすべての要素に対して繰り返し処理を行いたい場合には、eachメソッドを使いましょう。

 eachイーチメソッド
eachとは、配列やハッシュの要素1つ1つに対して、要素の数だけ繰り返し処理が行えるメソッドです。
以下のように記述して使用します。

1
2
3
[配列 or ハッシュ].each do | [変数] |
  # 処理
end
eachに続けてdo ~ endと記載します。このdo ~ end の間に繰り返し処理を記述します。

また、doの横にブロック変数（ | [変数] |）を記載しています。繰り返し処理が実行されるたびに、配列またはハッシュの値がそれぞれブロック変数に格納され、その値を処理の中で使用できます。

ブロック変数の動きがイメージしづらいかもしれません。配列とハッシュでそれぞれ使い方を説明します。

ハッシュ

以下のように、「果物の名前」と「果物の値段」を併せて出力させたいとします。

【例】
1
2
3
4
りんご : 150
オレンジ : 200
バナナ : 100
パイナップル : 300
そのような場合、ハッシュの値として｛果物の名前：果物の値段}を作成し、そのハッシュに対してeach文を実行することで以下のように実現できます。

【例】
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
fruits = { 'りんご' => 150, 'オレンジ' => 200, 'バナナ' => 100, 'パイナップル' => 300 }
fruits.each do |key, value|
  puts "#{key} : #{value}"
end

# 実行結果
#=> りんご : 150
#=> オレンジ : 200
#=> バナナ : 100
#=> パイナップル : 300
変数fruitsに ハッシュの値である{ 'りんご' => 150, 'オレンジ' => 200, 'バナナ' => 100, 'パイナップル' => 300 }を格納します。そして、その変数fruitsに対してeach文を実行することで、値をそれぞれ出力できます。

配列
配列に格納されている 'りんご', 'オレンジ', 'バナナ', 'パイナップル' の値を以下のようにそれぞれ出力させたいとします。

【例】
1
2
3
4
りんご
オレンジ
バナナ
パイナップル
そのような場合は、値をそれぞれ配列に格納させ、その配列に対してeach文を実行することで以下のように実現できます。

【例】
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
fruits = ['りんご', 'オレンジ', 'バナナ', 'パイナップル']
fruits.each do |item|
  puts item
end

# 実行結果
#=> りんご
#=> オレンジ
#=> バナナ
#=> パイナップル 
変数fruitsに [ 'りんご', 'オレンジ', 'バナナ', 'パイナップル' ]を格納しています。そして、each文を用いて変数fruitsの値を1つ1つ出力します。



本章では、each文を用いて、配列に格納されている要素に対して処理を実行します。では、これまで学習したeach文を踏まえてloop.rbファイルを編集しましょう。

 loop.rbを編集しましょう
eachメソッドを用いて、配列に繰り返し処理を実行します。
loop.rbを以下のように編集しましょう。

ruby/loop.rb
1
2
3
4
colors = ["あか", "あお", "きいろ"]
colors.each do |color|
  puts "色: #{color}"
end
編集できたら、rubyディレクトリに移動して、ターミナルでファイルを実行しましょう。
以下のように表示されていればOKです。

ターミナル
1
2
3
4
% ruby loop.rb
色: あか
色: あお
色: きいろ
実行すると、すべての要素が順番に出力されます。
ブロック変数colorには、1回目の繰り返しで「あか」、2回目で「あお」、3回目で「きいろ」が代入されます。
そして、要素の数だけ繰り返し処理を実行すると、このループは終了します。

以下の動画でeachメソッドについておさらいしましょう。


ミニアプリ作成
本章で学んだ内容を使って、roller_coaster.rbの開発を進めましょう。

入力と出力を繰り返し処理にしよう
roller_coaster.rbの機能はすでに完成していますが、まったく同じ記述をしている部分があり、冗長です。
このようなコードは、仕様の変更があった際に修正すべき箇所が多く、保守性を損ねます。

【例】現在のroller_coaster.rb
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
ride_count = 0
friends = []

friend = {}
puts "お友達の名前は？"
friend[:name] = gets.chomp
puts "お友達の身長は？"
friend[:height] = gets.to_i
friends << friend
if friend[:height] >= 130
  puts "#{friend[:name]}くんは乗車できます"
  ride_count += 1
else
  puts "#{friend[:name]}くんは乗車できません！"
end

friend = {}
puts "お友達の名前は？"
friend[:name] = gets.chomp
puts "お友達の身長は？"
friend[:height] = gets.to_i
friends << friend
if friend[:height] >= 130
  puts "#{friend[:name]}くんは乗車できます"
  ride_count += 1
else
  puts "#{friend[:name]}くんは乗車できません！"
end

friend = {}
puts "お友達の名前は？"
friend[:name] = gets.chomp
puts "お友達の身長は？"
friend[:height] = gets.to_i
friends << friend
if friend[:height] >= 130
  puts "#{friend[:name]}くんは乗車できます"
  ride_count += 1
else
  puts "#{friend[:name]}くんは乗車できません！"
end

puts "乗車するのは#{ride_count}人です"
繰り返し処理によって、これらの記述をまとめましょう。

 roller_coaster.rbを編集しましょう
何度も同じ記述をしていた部分をtimesメソッド内に移動します。
以下のようにroller_coaster.rbを編集しましょう。

ruby/roller_coaster.rb
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
ride_count = 0
friends = []

3.times do
  friend = {}
  puts "お友達の名前は？"
  friend[:name] = gets.chomp
  puts "お友達の身長は？"
  friend[:height] = gets.to_i
  friends << friend
  if friend[:height] >= 130
    puts "#{friend[:name]}くんは乗車できます"
    ride_count += 1
  else
    puts "#{friend[:name]}くんは乗車できません！"
  end
end

puts "乗車するのは#{ride_count}人です"
timesメソッドを使って、何度も同じ記述をしている部分を1つにまとめました。
入力と出力すべてがまとまっている状態です。

次に、ここからif文と出力を行っている部分をtimesメソッドから切り離して、
入力と出力を分離させます。

 roller_coaster.rbを編集しましょう
eachメソッドによる繰り返し処理で、配列の要素1つずつに対して条件分岐と出力を行います。
以下のようにroller_coaster.rbを編集しましょう。

ruby/roller_coaster.rb
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
ride_count = 0
friends = []

3.times do
  friend = {}
  puts "お友達の名前は？"
  friend[:name] = gets.chomp
  puts "お友達の身長は？"
  friend[:height] = gets.to_i
  friends << friend
end

friends.each do |friend|
  if friend[:height] >= 130
    puts "#{friend[:name]}くんは乗車できます"
    ride_count += 1
  else
    puts "#{friend[:name]}くんは乗車できません！"
  end
end

puts "乗車するのは#{ride_count}人です"
timesメソッドで入力を繰り返し、名前と身長の情報を持ったハッシュを配列に追加しています。
そして、配列に対してeachメソッドによる繰り返し処理を行い、身長が130cm以上か判別する条件分岐処理と出力を行っています。

 ターミナルでroller_coaster.rbを実行しましょう
挙動を確認するために、ターミナルで実行しましょう。以下のように出力されていればOKです。

https://tech-master.s3.amazonaws.com/uploads/curriculums//f71ab4983aaec871ae8ee0723c40fba7.png

入力と出力を分けたことでコードの意味も理解しやすくなりました。
43行あったコードも22行になり、非常にすっきりしています。

次章では、入力と出力の処理のまとまりに、それぞれ名前をつけて再利用する方法を学び、このコードをより意味が伝わるように書き換えて完成させます。

練習問題
本章で学んだことを問題を解きながら復習しましょう。問題を解く際は、カリキュラムを見てはいけません。思い出すという行動をすることで、より一層の知識定着が可能となります。

不明点は次のカリキュラムに進む前に復習し、満点をとれるまで解き直しましょう。それまで次のカリキュラムに進まないようにしてください。以降のカリキュラムは、これまで学んだ内容が身についている前提で進むからです。

【練習問題 Ruby】繰り返し処理をしよう①
【練習問題 Ruby】繰り返し処理をしよう②

この章の振り返り
要点チェック
 繰り返し処理とは、同じ内容の処理を繰り返し行う処理のこと。
 timesメソッドとは、数値が持つメソッドであり、その値の回数分だけ処理を繰り返す処理のこと。
 eachメソッドとは、配列が持つメソッドであり、要素一つひとつに対して繰り返し処理を行うメソッド。
